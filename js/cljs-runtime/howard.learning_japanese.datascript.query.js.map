{"version":3,"sources":["howard/learning_japanese/datascript/query.cljs"],"mappings":";AAMA;;;oEAAA,pEAAME,gJAEHC;AAFH,AAAA,GAGS,AAACC,qBAAKD;AAHf;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,IAAAC,YAKE,iBAAMI,IAAE,iBAAAC,WAAA,AAAA;IAAAC,WAEK,AAACE;AAFN,AAAA,0GAAAH,SAAAC,wCAAAD,SAAAC,5JAACC,kDAAAA,qEAAAA;;AAAT,iBAGO,CAAG,AAACE,gBAAML,KAAGF,vCACb,OAAOQ;;AAThB,AAAA,GAIU,AAACP,qBAAKH;AAJhB;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AAAAC;;AAWA;;;uEAAA,vEAAMW,sJAEHT,IAAIU;AAFP,AAOO,mDAAA,WAAAK,vDAACD;AAAD,AAAM,IAAAE,WAAQ,AAACV;IAATW,WAAA,AAAA;IAAAC,WAAAH;AAAA,AAAA,gHAAAC,SAAAC,SAAAC,2CAAAF,SAAAC,SAAAC,vLAACC,qDAAAA,iFAAAA;2MAJP,kGAAA,qDAAA,vJAACR,qDAAS,AAACL,jHACX,AAACM,6CAAK,CAAGZ,MAAIU,rGACb,AAACG,6CAAKb,xIACN,4CAAA,5CAACc;;AAMR;;;0EAAA,1EAAMM,4JAEHC;AAFH,AAAA,GAGS,OAASA;AAHlB;AAAA,AAAA,MAAA,KAAAxB,MAAA;;;AAIE,IAAMyB,oCAAM,iBAAAC,WAAA,AAAAC,cAAA,AAAAC,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,oDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,qIAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,wDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAJ,cAAA,AAAAC,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,qIAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,qDAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,gBAAA,KAAA,IAAA,vCAEkBP,hkCAElB,AAACU,hBACD,AAACA;IALDF,WAGK,AAACC;AAHN,AAAA,0GAAAP,SAAAM,wCAAAN,SAAAM,5JAACxB,kDAAAA,qEAAAA;;AAAb,AAME,GAAI,GAAK,MAAA,LAAMiB;AACb,IAAAU,WAAQ,AAACF;IAATG,WAAA,AAAA;IAAAC,WAA+CZ;AAA/C,AAAA,gHAAAU,SAAAC,SAAAC,2CAAAF,SAAAC,SAAAC,vLAACf,qDAAAA,iFAAAA;;AADH,kDAAA,0DAAA,uDAAA,5DAESE;;;AAEb,qBAAA,rBAACc,0GAEA,WAAKd;AAAL,AACE,8BAAA,mFAAA,1GAACe,kMAA4C,AAAChB,wEAA8BC;;AAE/E;;;;qEAAA,rEAAMgB,kJAGHrC,IAAIU;AAHP,AASO,OAAC,WAAKiC;AAAL,AAAQ,8BAAA,tBAAI,AAACpC,gBAAMoC;iFAFpB,+CAAA,WAAAH,1DAACC,9EACD,6CAAA,7CAACC;AADD,AAAS,iHAAA,zGAAG,AAAA,qFAAAF;GADZ,4CAAA,WAAAD,vDAACzB;AAAD,AAAM,+EAAAyB,xEAACnB;GADP,4CAAA,WAAAkB,vDAACxB;AAAD,AAAM,OAAA,mFAAAwB;GADN,AAAC7B,qEAA2BT,IAAIU","names":["js/Error","%","howard.learning-japanese.datascript.query/get-page-size-by-number","num","cljs.core/int?","r","G__55295","G__55296","datascript.core/q","howard.learning-japanese.indexdb/get-ds-db","cljs.core/count","js/Math","howard.learning-japanese.datascript.query/get-page-by-num-and-offset","offset","datascript.core.datoms","cljs.core.drop","cljs.core.take","cljs.core.map","p1__55297#","G__55298","G__55299","G__55300","datascript.core/pull","howard.learning-japanese.datascript.query/get-check-list-record-by-word","word","e","G__55301","cljs.core/vec","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","G__55302","howard.learning-japanese.indexdb/get-ds-check-list-db","cljs.core/first","G__55303","G__55304","G__55305","re-frame.core/reg-fx","re-frame.core/dispatch","howard.learning-japanese.datascript.query/is-this-page-done?","p1__55306#","p1__55307#","p1__55308#","cljs.core.filter","cljs.core.into","v"],"sourcesContent":["(ns howard.learning-japanese.datascript.query\n  (:require\n   [datascript.core :as d]\n   [howard.learning-japanese.indexdb :refer [get-ds-db get-ds-check-list-db]]\n   [re-frame.core :as re-frame]))\n\n(defn get-page-size-by-number\n  \"input a number, get the size\"\n  [num]\n  {:pre [(int? num)]\n   :post [(int? %)]}\n  (let [r (d/q '[:find ?c\n                 :where [?e :chinese ?c]]\n               (get-ds-db))]\n    (->> (/ (count r) num)\n         (.ceil js/Math))))\n\n(defn get-page-by-num-and-offset\n  \"get the page words by num and offset\"\n  [num offset]\n  (->> (d/datoms (get-ds-db) :aevt :word)\n       (drop (* num offset))\n       (take num)\n       (map :e)\n       (map #(d/pull (get-ds-db) '[:word :chinese :sentence] %))))\n\n;(get-page-by-num-and-offset 10 0)\n;(is-this-page-done 10 0)\n\n(defn get-check-list-record-by-word\n  \"get by word\"\n  [word]\n  {:pre [(string? word)]}\n  (let [e (-> (d/q `[:find ?e\n                     :where\n                     [?e :word ~word]]\n                   (get-ds-check-list-db))\n              (first)\n              (first))]\n    (if (not (nil? e))\n      (d/pull (get-ds-check-list-db) '[:word :count] e)\n      {:word word :count 0})))\n\n(re-frame/reg-fx\n :indexdb/get-check-list\n (fn [word]\n   (re-frame/dispatch [:indexdb/set-word-record (get-check-list-record-by-word word)])))\n\n(defn is-this-page-done?\n  \"check if this weeks finish\n finish definition: all word remember over 3 times.\"\n  [num offset]\n  (->> (get-page-by-num-and-offset num offset)\n       (map #(:word %))\n       (map #(get-check-list-record-by-word %))\n       (filter #(< (:count %) 3))\n       (into [])\n       ((fn [v] (<= (count v) 0)))))\n"]}