{"version":3,"sources":["howard/learning_japanese/indexdb.cljs"],"mappings":"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","names":["howard.learning-japanese.indexdb/indexdb","cljs.core.atom","howard.learning-japanese.indexdb/ds-db","howard.learning-japanese.indexdb/to-js-obj","m","cljs.core/clj->js","howard.learning-japanese.indexdb/handle-upgrade","event","js/console.log","indexed.db/create-version-change-event","indexed.db/get-request","indexed.db/result","indexed.db/create-database","indexed.db.create_object_store","indexed.db.create_index","howard.learning-japanese.indexdb/handle-success","idb","cljs.core/reset!","howard.learning-japanese.indexdb/sync-words-data","re-frame.core/dispatch","ajax.core.GET","response","cljs.core/deref","data","cljs.reader.read_string","tx","indexed.db.transaction","store","indexed.db.object_store","seq__48372","cljs.core/seq","chunk__48373","count__48374","i__48375","temp__5753__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","it","indexed.db.put","howard.learning-japanese.indexdb/setup-memory-db","howard.learning-japanese.indexdb/wait-db-done","timeout","js/Promise","res","js/setInterval","js/clearTimeout","howard.learning-japanese.indexdb/init-indexdb","indexed.db.open","$","indexed.db.on","howard.learning-japanese.indexdb/data","cljs.core/transient","howard.learning-japanese.indexdb/get-words-data","c__36016__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__36017__auto__","switch__35946__auto__","state_48413","state_val_48414","inst_48376","inst_48377","inst_48378","cljs.core/PersistentVector","inst_48379","inst_48380","inst_48381","cljs.core/PersistentHashMap","inst_48382","inst_48383","inst_48384","cljs.core.async.interop/p->c","statearr-48415","cljs.core.async.impl.ioc-helpers/take!","inst_48387","inst_48386","cljs.core/ExceptionInfo","statearr-48416","statearr-48417","statearr-48418","inst_48389","cljs.core/ex-data","inst_48390","inst_48391","cljs.core._EQ_","statearr-48419","statearr-48420","inst_48394","statearr-48421","statearr-48422","inst_48396","statearr-48423","statearr-48424","inst_48399","inst_48400","inst_48401","inst_48402","inst_48403","inst_48404","inst_48405","inst_48406","inst_48407","inst_48408","inst_48409","inst_48410","inst_48411","statearr-48427","cljs.core.async.impl.ioc-helpers/return-chan","statearr-48428","state-machine__35947__auto__","ret-value__35948__auto__","result__35949__auto__","cljs.core/keyword-identical?","ex__35950__auto__","e48429","statearr-48430","statearr-48431","state__36018__auto__","statearr-48432","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","_","trans","indexed.db.open_cursor","e","cursor","indexed.db/create-request","p-data","cljs.core/persistent!","cljs.core.swap_BANG_","cljs.core/assoc","p__48425","map__48426","cljs.core/--destructure-map","cljs.core.get","val","indexed.db/create-cursor-with-value","indexed.db/value","cljs.core.js__GT_clj","cljs.core.conj_BANG_","indexed.db.continue$","howard.learning-japanese.indexdb/setup-datascript","conn","datascript.core.create_conn","datascript.core.transact_BANG_","howard.learning-japanese.indexdb/get-ds-db"],"sourcesContent":["(ns howard.learning-japanese.indexdb\n  (:require [indexed.db :as db]\n            [howard.learning-japanese.events :as event]\n            [re-frame.core :as re-frame]\n            [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer [<p!]]\n            [ajax.core :refer [GET]]\n            [datascript.core :as d]\n            [cljs.reader :refer [read-string]]\n            [howard.learning-japanese.events :as events]))\n\n(def indexdb (atom nil))\n(def ds-db (atom nil))\n(declare get-words-data)\n(declare setup-memory-db)\n\n(defn to-js-obj\n  [m]\n  (clj->js m))\n\n(defn handle-upgrade\n  \"handle upgrade db version\n  current version is 1\"\n  [event]\n  (js/console.log \"inside handle-upgrade\")\n  (-> (db/create-version-change-event event)\n      (db/get-request)\n      (db/result)\n      (db/create-database)\n      (db/create-object-store \"words\" {:key-path \"id\" :auto-increment true})\n      (db/create-index \"chinese\" \"chinese\" {:unique false})))\n\n(defn handle-success\n  \"handle indexdb success open\"\n  [event idb]\n  (js/console.log \"inside handle-success\" event)\n  (reset! indexdb idb))\n\n(defn sync-words-data\n  []\n  (re-frame/dispatch [::events/set-app-status :get-words-data])\n  (GET \"words.edn\"\n    {:handler (fn [response]\n                (js/console.log @indexdb)\n                (let [data (read-string response)\n                      tx (-> @indexdb\n                             (db/result)\n                             (db/create-database)\n                             (db/transaction [\"words\"] \"readwrite\"))\n                      store (db/object-store tx \"words\")]\n                  (doseq [it data]\n                    (js/console.log \"insert: \" (to-js-obj it))\n                    (db/put store (to-js-obj it))))\n                (setup-memory-db))}))\n\n(defn wait-db-done\n  \"wait for db done\"\n  []\n  (let [timeout (atom nil)]\n    (js/Promise. (fn [res]\n                   (reset! timeout (js/setInterval\n                                    (fn []\n                                      (when-not (nil? @indexdb)\n                                        (js/clearTimeout @timeout)\n                                        (res nil))) 1000))))))\n\n(defn init-indexdb\n  \"init and open indexdb\"\n  []\n  (js/console.log \"init index db 'learning-jpaanese' v1...\")\n  (js/console.log \"QQQ?????\")\n  (as-> (db/open \"learning-japanese\" 1) $\n    (db/on $ \"error\" (fn [event] (js/console.log \"inside error\" event)))\n    (db/on $ \"blocked\" (fn [event] (js/console.log \"inside blocked\" event)))\n    (db/on $ \"upgradeneeded\" handle-upgrade)\n    (db/on $ \"success\" (fn [event] (handle-success event $)))))\n\n(def data (atom {:data  (transient [])\n                 :status :none}))\n\n(defn get-words-data\n  \"get words form indexdb.\"\n  []\n  (go\n    (js/console.log \"inside word data\")\n    (reset! data {:data (transient [])\n                  :status :none})\n\n    (let [_ (<p! (wait-db-done))\n          trans (-> @indexdb\n                    (db/result)\n                    (db/create-database)\n                    (db/transaction [\"words\"] \"readwrite\"))\n          store (db/object-store trans \"words\")]\n      (js/console.log \"get data out of indexdb..\")\n      (-> (db/open-cursor store)\n          (db/on \"success\"\n                 (fn [e]\n                   (let [cursor (-> (.-target e)\n                                    (db/create-request)\n                                    (db/result))]\n                     (if (nil? cursor)\n                       (let [p-data (persistent! (:data @data))]\n                         (if (<= (count p-data) 0)\n                           (do\n                             (js/console.log \"inside if\")\n                             (sync-words-data))\n                           (do\n                             (js/console.log \"inside else\" (clj->js @data))\n                             (swap! data assoc\n                                    :status :success\n                                    :data p-data))))\n                       (do (swap! data (fn [{:keys [data]}]\n                                         (let [val (-> (db/create-cursor-with-value cursor)\n                                                       (db/value)\n                                                       (js->clj :keywordize-keys true))]\n                                           {:status :loading\n                                            :data   (conj! data val)})))\n\n                           (-> (db/create-cursor-with-value cursor)\n                               (db/continue)))))))))))\n\n(defn setup-datascript\n  \"setup datascript db\n  need to wait until data atom done\"\n  []\n  (let [conn (d/create-conn)]\n    (d/transact! conn (:data @data))\n    conn))\n\n(defn setup-memory-db\n  \"setup memory db from indexdb, and store it into ds-db\n  wont sync indexdb data\n  \"\n  []\n  (re-frame/dispatch [::events/set-app-status ::init])\n  (init-indexdb)\n  (get-words-data)\n  (let [timeout (atom nil)]\n    (reset! timeout (js/setInterval\n                     (fn []\n                       (when (= (:status @data) :success)\n                         (js/console.log \"indexdb setup finish\")\n                         (reset! ds-db (setup-datascript))\n                         (re-frame/dispatch [::events/set-app-status :finish])\n                         (js/clearTimeout @timeout))) 1000))))\n\n(defn get-ds-db\n  \"get datascript db\"\n  []\n  @@ds-db)\n"]}