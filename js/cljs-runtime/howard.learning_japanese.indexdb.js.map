{"version":3,"sources":["howard/learning_japanese/indexdb.cljs"],"mappings":"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","names":["js/howard","js/howard.learning-japanese","js/howard.learning-japanese.indexdb","js/howard.learning-japanese.indexdb.learning-japanese-db","howard.learning-japanese.indexdb/learning-japanese-db","cljs.core.atom","js/howard.learning-japanese.indexdb.check-list-db","howard.learning-japanese.indexdb/check-list-db","js/howard.learning-japanese.indexdb.ds-learning-japanese-db","howard.learning-japanese.indexdb/ds-learning-japanese-db","js/howard.learning-japanese.indexdb.ds-check-list-db","howard.learning-japanese.indexdb/ds-check-list-db","howard.learning-japanese.indexdb/to-js-obj","m","cljs.core/clj->js","howard.learning-japanese.indexdb/handle-learning-japanese-upgrade","event","indexed.db/create-version-change-event","indexed.db/get-request","indexed.db/result","indexed.db/create-database","indexed.db.create_object_store","indexed.db.create_index","howard.learning-japanese.indexdb/sync-words-data","re-frame.core/dispatch","js/Promise","res","ajax.core.GET","response","data","cljs.reader.read_string","tx","cljs.core/deref","indexed.db.transaction","store","indexed.db.object_store","seq__54741","cljs.core/seq","chunk__54742","count__54743","i__54744","temp__5753__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","it","indexed.db.put","G__54745","howard.learning-japanese.indexdb/setup-memory-db","howard.learning-japanese.indexdb/open-learning-japanese","indexed.db.open","$","indexed.db.on","js/console.log","_","cljs.core/reset!","howard.learning-japanese.indexdb/get-words-data-from-indexdb","trans","cljs.core/transient","indexed.db.open_cursor","e","cursor","indexed.db/create-request","p-data","cljs.core/persistent!","G__54746","val","indexed.db/create-cursor-with-value","indexed.db/value","cljs.core.js__GT_clj","cljs.core.conj_BANG_","indexed.db.continue$","howard.learning-japanese.indexdb/handle-check-list-upgrade","howard.learning-japanese.indexdb/open-check-list","howard.learning-japanese.indexdb/check-list","cljs.core/string?","cljs.core/number?","howard.learning-japanese.indexdb/check-list-spec","spec_tools.data_spec.spec","js/Error","howard.learning-japanese.indexdb/add-check-list-count-to-datascript","cljs.spec.alpha.valid_QMARK_","count","word","G__54747","cljs.core/vec","cljs.core.sequence","cljs.core.concat","cljs.core/List","G__54748","datascript.core/q","datascript.core.transact_BANG_","cljs.core/second","cljs.core.assoc","howard.learning-japanese.indexdb/update-check-list-index-db","record","howard.learning-japanese.indexdb/update-check-list-record","re-frame.core/reg-fx","howard.learning-japanese.indexdb/get-check-list-data-from-indexdb","howard.learning-japanese.indexdb/init-indexdb","c__36062__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__36063__auto__","switch__35946__auto__","state_54785","state_val_54786","inst_54752","statearr-54787","inst_54749","inst_54750","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_54753","statearr-54788","inst_54782","inst_54783","statearr-54789","cljs.core.async.impl.ioc-helpers/return-chan","inst_54769","inst_54779","statearr-54790","inst_54762","statearr-54791","inst_54755","cljs.core/ex-data","inst_54756","inst_54757","cljs.core._EQ_","statearr-54792","inst_54777","statearr-54793","statearr-54794","cljs.core/ExceptionInfo","statearr-54795","statearr-54796","statearr-54797","inst_54770","statearr-54798","statearr-54799","statearr-54800","statearr-54801","inst_54760","statearr-54802","statearr-54803","statearr-54804","inst_54772","inst_54773","inst_54774","statearr-54805","inst_54765","inst_54766","inst_54767","statearr-54806","statearr-54807","state-machine__35947__auto__","ret-value__35948__auto__","result__35949__auto__","cljs.core/keyword-identical?","ex__35950__auto__","e54808","statearr-54809","statearr-54810","state__36064__auto__","statearr-54811","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","howard.learning-japanese.indexdb/setup-datascript","conn","datascript.core.create_conn","howard.learning-japanese.indexdb/get-ds-db","howard.learning-japanese.indexdb/get-ds-check-list-db","state_54876","state_val_54877","inst_54819","statearr-54878","inst_54853","inst_54863","statearr-54879","inst_54812","cljs.core/PersistentVector","inst_54813","inst_54814","inst_54815","inst_54816","inst_54817","statearr-54880","inst_54820","statearr-54881","inst_54849","inst_54850","inst_54851","statearr-54882","statearr-54883","inst_54836","inst_54846","statearr-54884","inst_54866","inst_54867","inst_54868","inst_54869","inst_54870","inst_54871","inst_54872","inst_54873","inst_54874","statearr-54885","inst_54829","statearr-54886","inst_54856","inst_54857","inst_54858","statearr-54887","inst_54822","inst_54823","inst_54824","statearr-54888","inst_54844","statearr-54889","statearr-54890","statearr-54891","statearr-54892","statearr-54893","inst_54861","statearr-54894","statearr-54895","inst_54837","statearr-54896","statearr-54897","statearr-54898","statearr-54899","inst_54827","statearr-54900","statearr-54901","statearr-54902","inst_54854","statearr-54903","statearr-54904","statearr-54905","inst_54839","inst_54840","inst_54841","statearr-54906","statearr-54907","inst_54832","inst_54833","inst_54834","statearr-54908","statearr-54909","e54910","statearr-54911","statearr-54912","statearr-54913"],"sourcesContent":["(ns howard.learning-japanese.indexdb\n  (:require\n   [ajax.core :refer [GET]]\n   [cljs.core.async :refer [go]]\n   [cljs.core.async.interop :refer [<p!]]\n   [cljs.reader :refer [read-string]]\n   [cljs.spec.alpha :as s]\n   [datascript.core :as d]\n   [indexed.db :as db]\n   [re-frame.core :as re-frame]\n   [spec-tools.data-spec :as ds]))\n\n; reg event to re-frame\n(defonce learning-japanese-db (atom nil))\n(defonce check-list-db (atom nil))\n(defonce ds-learning-japanese-db (atom nil))\n(defonce ds-check-list-db (atom nil))\n(declare get-words-data-from-indexdb)\n(declare setup-memory-db)\n\n(defn to-js-obj\n  [m]\n  (clj->js m))\n\n(defn handle-learning-japanese-upgrade\n  \"handle upgrade db version\n  current version is 1\"\n  [event]\n  (-> (db/create-version-change-event event)\n      (db/get-request)\n      (db/result)\n      (db/create-database)\n      (db/create-object-store \"words\" {:key-path \"word\"})\n      (db/create-index \"chinese\" \"chinese\" {:unique false})))\n\n(defn sync-words-data\n  []\n  (re-frame/dispatch [:app/set-app-status :get-words-data])\n  (js/Promise.\n   (fn [res]\n     (GET \"words.edn\"\n       {:handler (fn [response]\n                   (let [data (read-string response)\n                         tx (-> @learning-japanese-db\n                                (db/result)\n                                (db/create-database)\n                                (db/transaction [\"words\"] \"readwrite\"))\n                         store (db/object-store tx \"words\")]\n                     (doseq [it data]\n                       (db/put store (to-js-obj it))))\n                   (res (setup-memory-db)))}))))\n\n(defn- open-learning-japanese []\n  (js/Promise.\n   (fn [res]\n     (as-> (db/open \"learning-japanese\" 1) $\n       (db/on $ \"error\" (fn [event] (js/console.log \"inside error\" event)))\n       (db/on $ \"blocked\" (fn [event] (js/console.log \"inside blocked\" event)))\n       (db/on $ \"upgradeneeded\" handle-learning-japanese-upgrade)\n       (db/on $ \"success\" (fn [_]\n                            (reset! learning-japanese-db $)\n                            (res)))))))\n\n(defn get-words-data-from-indexdb\n  \"get words form indexdb.\"\n  []\n  (js/Promise.\n   (fn [res]\n     (let [trans (-> @learning-japanese-db\n                     (db/result)\n                     (db/create-database)\n                     (db/transaction [\"words\"] \"readwrite\"))\n           store (db/object-store trans \"words\")\n           data (transient [])]\n       (-> (db/open-cursor store)\n           (db/on \"success\"\n                  (fn [e]\n                    (let [cursor (-> (.-target e)\n                                     (db/create-request)\n                                     (db/result))]\n                      (if (nil? cursor)\n                        (let [p-data (persistent! data)]\n                          (if (<= (count p-data) 0)\n                            ;; not data, sync from db\n                            (res (sync-words-data))\n\n                            ;; return\n                            (do\n                              (res p-data))))\n                        (let [val (-> (db/create-cursor-with-value cursor)\n                                      (db/value)\n                                      (js->clj :keywordize-keys true))]\n                          (conj! data val)\n                          (-> (db/create-cursor-with-value cursor)\n                              (db/continue))))))))))))\n\n;; ===============================================================\n;; ========== functions abaout check-list indexdb below ==========\n;; ===============================================================\n\n(defn- handle-check-list-upgrade\n  \"handle check list upgrade\"\n  [event]\n  (js/console.log \"inside handle-check-list-upgraded\")\n  (-> (db/create-version-change-event event)\n      (db/get-request)\n      (db/result)\n      (db/create-database)\n      (db/create-object-store \"check-lists\" {:key-path \"word\" :auto-increment true})))\n\n(defn- open-check-list []\n  (js/Promise.\n   (fn [res]\n     (as-> (db/open \"check-list\" 1) $\n       (db/on $ \"error\" (fn [event] (js/console.log \"inside error\" event)))\n       (db/on $ \"blocked\" (fn [event] (js/console.log \"inside blocked\" event)))\n       (db/on $ \"upgradeneeded\" handle-check-list-upgrade)\n       (db/on $ \"success\" (fn [_]\n                            (reset! check-list-db $)\n                            (res)))))))\n\n;; TODO: spec, need to be put to other place.\n(def check-list\n  {:word string?\n   :count number?})\n(def check-list-spec\n  (ds/spec\n   {:name ::check-list-spec\n    :spec check-list}))\n\n(defn add-check-list-count-to-datascript\n  \"add to datascrit, need to make sure that datascript initialize first\n  Return the data that original count + (:count data)\n  \"\n  [data]\n  {:pre [(s/valid? check-list-spec data)\n         (not (nil? @ds-check-list-db))]}\n  (let [count (:count data)\n        word (:word data)\n        e (-> (d/q `[:find ?e ?c\n                     :where [?e :word ~word]\n                     [?e :count ?c]]\n                   @@ds-check-list-db)\n              ;; 1st first get  from set, and second first get from inner vector.\n              (first))]\n    (if (nil? e)\n      (do\n        (d/transact! @ds-check-list-db\n                     [data])\n        data)\n      (do\n        (d/transact! @ds-check-list-db\n                     [[:db/add\n                       (first e)\n                       :count\n                       (+ (second e) count)]])\n        (assoc data :count (+ count (second e)))))))\n\n(defn update-check-list-index-db\n  \"update indexdb by record\"\n  [record]\n  {:pre [(s/valid? check-list-spec record)\n         (not (nil? @check-list-db))]}\n  (let [tx (-> @check-list-db\n               (db/result)\n               (db/create-database)\n               (db/transaction [\"check-lists\"] \"readwrite\"))\n        store (db/object-store tx \"check-lists\")]\n    (db/put store (to-js-obj record))))\n\n(defn update-check-list-record\n  \"insert check list record to db\n   will first add to datascript\n   then add to indexedDB\n  \"\n  [data]\n  {:pre [(s/valid? check-list-spec data)]}\n  (-> (add-check-list-count-to-datascript data)\n      (update-check-list-index-db)))\n\n(re-frame/reg-fx\n :update-check-list-record\n (fn [record]\n   (update-check-list-record record)))\n\n;; TODO: can abstract load logic\n(defn get-check-list-data-from-indexdb\n  \"get check-list-data-from indexdb\"\n  []\n  (js/Promise.\n   (fn [res]\n     (let [trans (-> @check-list-db\n                     (db/result)\n                     (db/create-database)\n                     (db/transaction [\"check-lists\"] \"readwrite\"))\n           store (db/object-store trans \"check-lists\")\n           data (transient [])]\n       (-> (db/open-cursor store)\n           (db/on \"success\"\n                  (fn [e]\n                    (let [cursor (-> (.-target e)\n                                     (db/create-request)\n                                     (db/result))]\n                      (if (nil? cursor)\n                        (let [p-data (persistent! data)]\n                          (res p-data))\n                        (let [val (-> (db/create-cursor-with-value cursor)\n                                      (db/value)\n                                      (js->clj :keywordize-keys true))]\n                          (conj! data val)\n                          (-> (db/create-cursor-with-value cursor)\n                              (db/continue))))))))))))\n\n;(insert-check-list-record {:word 2})\n\n;; ===============================================================\n;; ========== functions abaout initial and script below ===========\n;; ===============================================================\n\n(defn init-indexdb\n  \"init and open indexdb\"\n  []\n  (js/Promise.\n   (fn [res]\n     (go\n       (<p! (open-learning-japanese))\n       (<p! (open-check-list))\n       (res)))))\n\n;; TODO: check sechma\n(defn setup-datascript\n  \"setup datascript db\n  need to wait until data atom done\"\n  [data]\n  (let [conn (d/create-conn)]\n    (d/transact! conn data)\n    conn))\n\n(defn get-ds-db\n  \"get datascript db\"\n  []\n  @@ds-learning-japanese-db)\n\n(defn get-ds-check-list-db\n  []\n  @@ds-check-list-db)\n\n;{:db (assoc db :word-record  (get-check-list-record-by-word word))}\n\n(defn setup-memory-db\n  \"setup memory db from indexdb, and store it into ds-db\n  wont sync indexdb data\n  \"\n  []\n  (go\n    (re-frame/dispatch [:app/set-app-status ::init])\n    (<p! (init-indexdb))\n    (let [word-data  (<p! (get-words-data-from-indexdb))\n          check-list-data (<p! (get-check-list-data-from-indexdb))]\n      (reset! ds-learning-japanese-db (setup-datascript word-data))\n      (reset! ds-check-list-db (setup-datascript check-list-data)))\n    (re-frame/dispatch [:app/set-app-status :finish])))\n"]}