shadow$provide.module$node_modules$$mui$system$cssVars$prepareCssVars=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _objectWithoutPropertiesLoose2=global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")),_utils=require("module$node_modules$$mui$utils$index"),_cssVarsParser=global(require("module$node_modules$$mui$system$cssVars$cssVarsParser"));
const _excluded=["colorSchemes","components"],_excluded2=["light"];exports.default=function(theme,parserConfig){var {colorSchemes={}}=theme;theme=(0,_objectWithoutPropertiesLoose2.default)(theme,_excluded);const {vars:rootVars,css:rootCss,varsWithDefaults:rootVarsWithDefaults}=(0,_cssVarsParser.default)(theme,parserConfig);let themeVars=rootVarsWithDefaults;const colorSchemesMap={};({light:theme}=colorSchemes);colorSchemes=(0,_objectWithoutPropertiesLoose2.default)(colorSchemes,_excluded2);Object.entries(colorSchemes||
{}).forEach(([key,scheme])=>{const {vars,css,varsWithDefaults}=(0,_cssVarsParser.default)(scheme,parserConfig);themeVars=(0,_utils.deepmerge)(themeVars,varsWithDefaults);colorSchemesMap[key]={css,vars}});if(theme){const {css,vars,varsWithDefaults}=(0,_cssVarsParser.default)(theme,parserConfig);themeVars=(0,_utils.deepmerge)(themeVars,varsWithDefaults);colorSchemesMap.light={css,vars}}return{vars:themeVars,generateCssVars:colorScheme=>colorScheme?colorSchemesMap[colorScheme]:{css:rootCss,vars:rootVars}}}}
//# sourceMappingURL=module$node_modules$$mui$system$cssVars$prepareCssVars.js.map
