{"version":3,"sources":["camel_snake_kebab/internals/misc.cljc"],"mappings":";AAIA,AAAA,gDAAA,wDAAAA,xGAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qFAAA,kCAAAG,vHAAMD,gGAAca,SAASC,QAAQC,IAAIC;AAAzC,AAAA,IAAAd,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAAqDe,uIACUC;AAD/D,AAEE,IAAAC,qBAAwB,AAACG,cAAI,AAACI,mDAAMT,UAAUD;AAA9C,AAAA,GAAAG;AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAhB,gBAAAc;IAAAA,iBAAA,AAAAb,eAAAa;YAAAE,RAAUC;WAAVH,PAAkBI;AAAlB,AACE,OAACE,kDAAKZ,IAAI,AAACa,eAAK,CAACf,yCAAAA,gDAAAA,TAASW,4BAAAA,QAAO,AAACK,4CAAIf,QAAQW;;AADhD;;;;AAFF,CAAA,wEAAA,xEAAMzB;;AAAN;AAAA,CAAA,kEAAA,WAAAK,7EAAML;AAAN,AAAA,IAAAM,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAM,WAAA,AAAAJ,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAO,qBAAA;AAAA,AAAA,OAAAA,wDAAAN,SAAAG,SAAAC,SAAAC,SAAAN;;;AAAA,AAMA,2DAAA,kFAAA,WAAA,UAAA,WAAA,WAAA,UAAA,WAAA,YAAA,WAAA,UAAA,WAAA,WAAA,WAAA,/QAAKyB;AAGL,0DAAA,1DAAMC,4HAAwBf;AAA9B,AACE,IAAAgB,mBAAI,iBAAAC,WAAyB,AAACC,0BAAWlB;AAArC,AAAA,wLAAAiB,+EAAAA,/PAACH,yFAAAA,mGAAAA;;AAAL,AAAA,oBAAAE;AAAAA;;AACI,OAACG,0BAAWnB","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","camel-snake-kebab.internals.misc/convert-case","p__31583","map__31584","cljs.core/--destructure-map","cljs.core.get","seq31578","G__31579","cljs.core/first","cljs.core/next","G__31580","G__31581","G__31582","self__5754__auto__","first-fn","rest-fn","sep","s","separator","camel-snake-kebab.internals.string-separator/generic-separator","temp__5751__auto__","vec__31585","seq__31586","cljs.core/seq","first__31587","first","rest","camel-snake-kebab.internals.string-separator/split","clojure.string.join","cljs.core/cons","cljs.core.map","camel-snake-kebab.internals.misc/upper-case-http-headers","camel-snake-kebab.internals.misc/capitalize-http-header","or__5045__auto__","G__31588","clojure.string/upper-case","clojure.string/capitalize"],"sourcesContent":["(ns ^:no-doc camel-snake-kebab.internals.misc\n  (:require [camel-snake-kebab.internals.string-separator :refer [split generic-separator]]\n            [clojure.string :refer [join upper-case capitalize]]))\n\n(defn convert-case [first-fn rest-fn sep s & {:keys [separator]\n                                              :or   {separator generic-separator}}]\n  (if-let [[first & rest] (seq (split separator s))]\n    (join sep (cons (first-fn first) (map rest-fn rest)))\n    \"\"))\n\n(def upper-case-http-headers\n  #{\"CSP\" \"ATT\" \"WAP\" \"IP\" \"HTTP\" \"CPU\" \"DNT\" \"SSL\" \"UA\" \"TE\" \"WWW\" \"XSS\" \"MD5\"})\n\n(defn capitalize-http-header [s]\n  (or (upper-case-http-headers (upper-case s))\n      (capitalize s)))\n"]}