{"version":3,"sources":["reagent_mui/material/textarea_autosize.cljs"],"mappings":"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","names":["reagent-mui.material.textarea-autosize/different?","a","b","js/Math","or__5045__auto__","reagent-mui.material.textarea-autosize/get-style-value","computed-style","property","js/parseInt","reagent_mui.material.textarea_autosize.goog$module$goog$object.get","reagent-mui.material.textarea-autosize/react-textarea-autosize","js/module$node_modules$react$index.forwardRef","props","ref","map__32048","cljs.core/--destructure-map","cljs.core.get","vec__32049","cljs.core.nth","reagent-mui.util/js->clj'","on-change","placeholder","max-rows","min-rows","style","value","other-props","cljs.core.dissoc","controlled?","reagent-mui.util/use-ref","input-ref","shadow-ref","renders","handle-ref","reagent_mui.util.use_fork_ref","state","set-state","reagent-mui.util/use-state","sync-height","reagent-mui.util/use-callback","input","container-window","js/module$node_modules$$mui$material$node$utils$index.ownerWindow","shadow","cljs.core._EQ_","cljs.core/last","box-sizing","padding","border","inner-height","_","single-row-height","outer-height","G__32052","x__5130__auto__","y__5131__auto__","js/Number","x__5133__auto__","y__5134__auto__","outer-height-style","overflow?","G__32053","prev-state","cljs.core.not_EQ_","reagent-mui.util/swap-ref","cljs.core/inc","js/process","js/console","handle-change","e","reagent-mui.util/set-ref","reagent-mui.util/use-effect","handle-resize","js/module$node_modules$$mui$material$node$utils$index.debounce","resize-observer","reagent.core.atom","js/ResizeObserver","cljs.core/reset!","cljs.core/deref","js/module$node_modules$$mui$material$node$utils$index.unstable_useEnhancedEffect","reagent.core.as_element","reagent-mui.util/remove-undefined-vals","cljs.core.merge","reagent-mui.material.textarea-autosize/textarea-autosize","reagent.core/adapt-react-class"],"sourcesContent":["(ns reagent-mui.material.textarea-autosize\n  \"Imports @mui/material/TextareaAutosize as a Reagent component.\n   Original documentation is at https://mui.com/material-ui/react-textarea-autosize/ .\"\n  (:require-macros [reagent-mui.util :refer [forward-ref]])\n  (:require [\"react\" :as react]\n            [\"@mui/material/utils\" :as mui-utils]\n            [reagent.core :as r :refer [atom]]\n            [goog.object :as obj]\n            [reagent-mui.util :refer [js->clj' remove-undefined-vals use-fork-ref\n                                      use-callback use-effect use-ref use-state set-ref swap-ref]]))\n\n;; Converted from https://github.com/mui-org/material-ui/blob/v4.8.3/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js\n;; Original code is copyright (c) Material UI contributors. Used under the terms of the MIT License.\n\n(defn ^:private different? [a b]\n  (< 1 (.abs js/Math (- (or a 0) (or b 0)))))\n\n(defn ^:private get-style-value [computed-style property]\n  (or (js/parseInt (obj/get computed-style property) 10) 0))\n\n(def react-textarea-autosize\n  (forward-ref textarea-autosize [props ref]\n    (let [props (js->clj' props)\n          {:keys [on-change placeholder max-rows min-rows style value] :or {min-rows 1}} props\n          other-props (dissoc props :input-ref :on-change :max-rows :min-rows :style)\n          controlled? (.-current (use-ref (some? value)))\n          input-ref (use-ref nil)\n          shadow-ref (use-ref nil)\n          renders (use-ref 0)\n          handle-ref (use-fork-ref (:input-ref props) input-ref ref)\n          [state set-state] (use-state {})\n          sync-height (use-callback #(let [input (.-current input-ref)\n                                           container-window (mui-utils/ownerWindow input)\n                                           shadow (.-current shadow-ref)\n                                           computed-style (.getComputedStyle container-window input)]\n                                       (when-not (zero? (get-style-value computed-style \"width\"))\n                                         (set! (.-width (.-style shadow)) (obj/get computed-style \"width\"))\n                                         (set! (.-value shadow) (or (.-value input) placeholder \"x\"))\n                                         (when (= (last (.-value shadow)) \\newline)\n                                           (set! (.-value shadow) (str (.-value shadow) \" \")))\n                                         (let [box-sizing (obj/get computed-style \"box-sizing\")\n                                               padding (+ (get-style-value computed-style \"padding-bottom\")\n                                                          (get-style-value computed-style \"padding-top\"))\n                                               border (+ (get-style-value computed-style \"border-bottom-width\")\n                                                         (get-style-value computed-style \"border-top-width\"))\n                                               inner-height (.-scrollHeight shadow)\n                                               _ (set! (.-value shadow) \"x\")\n                                               single-row-height (.-scrollHeight shadow)\n                                               outer-height (cond-> inner-height\n                                                              min-rows (max (* (js/Number. min-rows) single-row-height))\n                                                              max-rows (min (* (js/Number. max-rows) single-row-height))\n                                                              true (max single-row-height))\n                                               outer-height-style (if (= \"border-box\" box-sizing)\n                                                                    (+ outer-height padding border)\n                                                                    outer-height)\n                                               overflow? (not (different? outer-height inner-height))]\n                                           (set-state (fn [prev-state]\n                                                        (if (and (< (.-current renders) 20)\n                                                                 (or (and (pos? outer-height-style)\n                                                                          (different? (:outer-height-style prev-state) outer-height-style))\n                                                                     (not= overflow? (:overflow? prev-state))))\n                                                          (do\n                                                            (swap-ref renders inc)\n                                                            {:overflow?          overflow?\n                                                             :outer-height-style outer-height-style})\n                                                          (do\n                                                            (when (and (or (not (exists? js/process))\n                                                                           (not= \"production\" (.. js/process -env -NODE_ENV)))\n                                                                       (= (.-current renders) 20))\n                                                              (.error js/console \"Material-UI: too many re-renders. The layout is unstable.\\nTextareaAutosize limits the number of renders to prevent an infinite loop\"))\n                                                            prev-state)))))))\n                                    #js [max-rows min-rows placeholder])\n          handle-change (fn [e]\n                          (set-ref renders 0)\n                          (when-not controlled?\n                            (sync-height))\n                          (when on-change\n                            (on-change e)))]\n      (use-effect #(let [handle-resize (mui-utils/debounce (fn []\n                                                             (set-ref renders 0)\n                                                             (sync-height)))\n                         container-window (mui-utils/ownerWindow (.-current input-ref))\n                         resize-observer (atom nil)]\n                     (.addEventListener container-window \"resize\" handle-resize)\n                     (when (exists? js/ResizeObserver)\n                       (reset! resize-observer (js/ResizeObserver. handle-resize))\n                       (.observe @resize-observer (.-current input-ref)))\n                     (fn []\n                       (.clear handle-resize)\n                       (.removeEventListener container-window \"resize\" handle-resize)\n                       (when @resize-observer\n                         (.disconnect @resize-observer))))\n                  #js [sync-height])\n      (mui-utils/unstable_useEnhancedEffect sync-height)\n      (use-effect #(set-ref renders 0)\n                  #js [value])\n      (r/as-element\n       [:<>\n        [:textarea (remove-undefined-vals\n                    (merge {:on-change handle-change\n                            :ref       handle-ref\n                            :rows      min-rows\n                            :style     (merge {:height   (:outer-height-style state)\n                                               :overflow (when (:overflow? state) :hidden)}\n                                              style)}\n                           other-props))]\n        [:textarea {:aria-hidden true\n                    :class-name  (:class-name props)\n                    :read-only   true\n                    :ref         shadow-ref\n                    :tab-index   -1\n                    :style       (merge {:visibility :hidden\n                                         :position   :absolute\n                                         :overflow   :hidden\n                                         :height     0\n                                         :top        0\n                                         :left       0\n                                         :transform  \"translateZ(0)\"}\n                                        style\n                                        {:padding 0})}]]))))\n\n(def textarea-autosize (r/adapt-react-class react-textarea-autosize))\n"]}