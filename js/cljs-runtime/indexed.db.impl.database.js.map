{"version":3,"sources":["indexed/db/impl/database.cljs"],"mappings":";AAMA,wDAAA,gEAAAA,xHAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEACWI;qBADX,AAAAF,4CAAAF,eAAA,5EACoBK;AADpB,AAEE,cAAA,VAAMC;AAAN,AACE,oBAAMF;AAAN,AACE,CAAM,AAAWE,kBAASF;;AAD5B;;AAEA,GAAM,GAAA,mBAAA,lBAAOC;AAAb,AACE,CAAM,AAAiBC,wBAASD;;AADlC;;AAEAC;;AAEJ,uDAAA,+DAAAC,tHAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;iBAAA,AAAAN,4CAAAM,eAAA,kEAAA,1IACWE;AADX,AAEE,cAAA,VAAMJ;AAAN,AACE,CAAM,AAAcA,qBAASI;;AAC7BJ;;AAEJ,AAAA;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,qFAAAK,rFAASK;;AAAT,CAAA,AAAA,mGAAA,nGAASA,8GAEEG;;AAFX,AAAA,YAAA,RAEWA;AAFX,AAEcD;;;AAFd,CAAA,AAAA,6EAAA,7EAASF,wFAKCG;;AALV,AAAA,YAAA,RAKUA;AALV,AAKa,OAAQD;;;AALrB,CAAA,AAAA,qFAAAP,rFAASK;;AAAT,CAAA,AAAA,kGAAA,lGAASA,6GAQCG;;AARV,AAAA,YAAA,RAQUA;AARV,AAQa,OAAQD;;;AARrB,CAAA,AAAA,oGAAA,pGAASF,+GASGG;;AATZ,AAAA,YAAA,RASYA;AATZ,AASe,OAAWD;;;AAT1B,CAAA,AAAA,gHAAA,hHAASF,2HAWJG,EAAEC,KAAKd;;AAXZ,AAAA,YAAA,RAWKa;AAXL,AAYI,GAAI,GAAA,YAAA,XAAOb;AACT,OAACe,0CAA0B,AAAoBH,6BAAIE,KAAK,AAACjB,sDAA0BG;;AACnF,OAACe,0CAA0B,AAAoBH,6BAAIE;;;;AAdzD,CAAA,AAAA,gHAAA,hHAASJ,2HAgBJG,EAAEC;;AAhBP,AAAA,YAAA,RAgBKD;AAhBL,AAiBI,OAAoBD,6BAAIE;;;AAjB5B,CAAA,AAAA,+GAAA,/GAASJ,0HAmBJG;;AAnBL,AAAA,YAAA,RAmBKA;AAnBL,AAoBI,OAACG,kDAAU,AAAoBJ;;;AApBnC,CAAA,AAAA,wGAAA,xGAASF,mHAsBJG,EAAEI,YAAYC,KAAKlB;;AAtBxB,AAAA,YAAA,RAsBKa;AAtBL,AAuBI,OAACM,+CAA+B,AAAcP,uBAAI,AAACQ,8CAAMC,gBAAMJ,aAAaC,KAAK,AAACf,qDAAyBH;;;AAvB/G,CAAA,6CAAA,7CAASU;AAAT,AAAA,AAAA;;;AAAA,CAAA,mDAAA,nDAASA;;AAAT,CAAA,sDAAA,tDAASA;;AAAT,CAAA,2DAAA,WAAAJ,mBAAAC,qBAAAC,9GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;yCAAA,zCAASI,0FAAUC;AAAnB,AAAA,YAAAF,kCAAmBE;;;AAAVF,AAyBT,2CAAA,3CAAMY,8FACHC;AADH,AAEE,GAAA,GAAA,MAAA,LAA6BA;AAA7B,GAAA,EAAA,WAAA,CAAAlB,gCAAA,AAA6BkB;AAA7B;;AAAA,GAAA,EAAA,AAA6BA;AAA7B,OAAAC,kCAAYC,sCAAiBF;;AAA7B;;;;AAAA,OAAAC,kCAAYC,sCAAiBF;;;AAE/B,2CAAA,3CAAMG,8FACHd;AADH,AAEE,YAAAF,kCAAWE;;AAEb,iCAAA,jCAAMe,0EACHC;AADH,AAEE,OAACC,gCAAWD;;AAEd,AAAA,+CAAA,uDAAAE,tGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAMD,wFACFJ,GAAGd,KAAKd;AADZ,AAEG,OAACkC,8CAAyBN,GAAGd,KAAKd;;;AAFrC,CAAA,6EAAA,7EAAMgC,wFAGFJ,GAAGd;AAHP,AAIG,0FAAA,nFAACqB,2EAAoBP,GAAGd;;;AAJ3B,CAAA,uEAAA,vEAAMkB;;AAAN,AAMA,+CAAA,/CAAMI,sGACHR,GAAGd;AADN,AAEE,AAACuB,8CAAyBT,GAAGd;;AAC7Bc;;AAEF,8CAAA,9CAAMU,oGACHV;AADH,AAEE,OAACW,6CAAwBX;;AAE3B,mCAAA,nCAAMY,8EACHZ;AADH,AAEE,OAACa,kCAAab;;AAEhB,AAAA,uCAAA,+CAAAE,tFAAMa;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAV,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAMU,gFACFf,GAAGX,YAAYC,KAAKlB;AADxB,AAEG,OAAC4C,sCAAiBhB,GAAGX,YAAYC,KAAKlB;;;AAFzC,CAAA,qEAAA,rEAAM2C,gFAGFf,GAAGX,YAAYC;AAHnB,AAIG,8FAAA,vFAAC2B,mEAAYjB,GAAGX,YAAYC;;;AAJ/B,CAAA,qEAAA,rEAAMyB,gFAKFf,GAAGX;AALP,AAMG,yFAAA,lFAAC4B,mEAAYjB,GAAGX;;;AANnB,CAAA,+DAAA,/DAAM0B;;AAAN,AAQA,8BAAA,9BAAMG,oEACHC;AADH,AAEE,OAACrB,yCACA,AAACsB,uCAAkBD","names":["p__45194","map__45195","cljs.core/--destructure-map","cljs.core.get","indexed.db.impl.database/clj->create-store-options","key-path","auto-increment","options","p__45197","map__45198","indexed.db.impl.database/clj->transaction-options","durability","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","indexed.db.impl.database/Database","indexed.db.impl.database/->Database","idb","_","name","indexed.db.impl.store/create-object-store","cljs.core.array_seq","store-names","mode","indexed.db.impl.transaction/create-transaction","cljs.core.apply","cljs.core/array","indexed.db.impl.database/database?","x","cljs.core/native-satisfies?","indexed.db.impl.protocols/IDBDatabase","indexed.db.impl.database/create-database","indexed.db.impl.database/close","db","indexed.db.impl.protocols/close","var_args","G__45201","indexed.db.impl.database/create-object-store","js/Error","indexed.db.impl.protocols/create-object-store","indexed.db.impl.database.create_object_store","indexed.db.impl.database/delete-object-store","indexed.db.impl.protocols/delete-object-store","indexed.db.impl.database/object-store-names","indexed.db.impl.protocols/object-store-names","indexed.db.impl.database/version","indexed.db.impl.protocols/version","G__45203","indexed.db.impl.database/transaction","indexed.db.impl.protocols/transaction","indexed.db.impl.database.transaction","indexed.db.impl.database/db","belongs-to-database","indexed.db.impl.protocols/idb-database"],"sourcesContent":["(ns ^:no-doc indexed.db.impl.database\n  (:require [indexed.db.impl.protocols :as impl]\n            [indexed.db.impl.store :as store]\n            [indexed.db.impl.transaction :as transaction])\n  (:refer-clojure :exclude [name]))\n\n(defn clj->create-store-options\n  [{:keys [key-path auto-increment]}]\n  (let [options #js {}]\n    (when key-path\n      (set! (.-keyPath options) key-path))\n    (when (some? auto-increment)\n      (set! (.-autoIncrement options) auto-increment))\n    options))\n\n(defn clj->transaction-options\n  [{:keys [durability] :or {durability \"default\"}}]\n  (let [options #js {}]\n    (set! (.-durability options) durability)\n    options))\n\n(deftype Database [idb]\n  impl/EventTarget\n  (target [_] idb)\n\n  INamed\n  (-name [_] (.-name idb))\n\n  impl/IDBDatabase\n  (close [_] (.close idb))\n  (version [_] (.-version idb))\n  (create-object-store\n    [_ name options]\n    (if (some? options)\n      (store/create-object-store (.createObjectStore idb name (clj->create-store-options options)))\n      (store/create-object-store (.createObjectStore idb name))))\n  (delete-object-store\n    [_ name]\n    (.deleteObjectStore idb name))\n  (object-store-names\n    [_]\n    (array-seq (.-objectStoreNames idb)))\n  (transaction\n    [_ store-names mode options]\n    (transaction/create-transaction (.transaction idb (apply array store-names) mode (clj->transaction-options options)))))\n\n(defn database?\n  [x]\n  (satisfies? impl/IDBDatabase x))\n\n(defn create-database\n  [idb]\n  (Database. idb))\n\n(defn close\n  [db]\n  (impl/close db))\n\n(defn create-object-store\n  ([db name options]\n   (impl/create-object-store db name options))\n  ([db name]\n   (create-object-store db name nil)))\n\n(defn delete-object-store\n  [db name]\n  (impl/delete-object-store db name)\n  db)\n\n(defn object-store-names\n  [db]\n  (impl/object-store-names db))\n\n(defn version\n  [db]\n  (impl/version db))\n\n(defn transaction\n  ([db store-names mode options]\n   (impl/transaction db store-names mode options))\n  ([db store-names mode]\n   (transaction db store-names mode {}))\n  ([db store-names]\n   (transaction db store-names \"readonly\")))\n\n(defn db\n  [belongs-to-database]\n  (create-database\n   (impl/idb-database belongs-to-database)))\n"]}