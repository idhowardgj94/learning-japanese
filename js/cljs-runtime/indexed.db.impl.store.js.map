{"version":3,"sources":["indexed/db/impl/store.cljs"],"mappings":"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","names":["indexed.db.impl.store/key*","x","indexed.db.impl.key-range/key-range?","indexed.db.impl.key-range/idb-key-range","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","indexed.db.impl.store/BaseObjectStore","indexed.db.impl.store/->BaseObjectStore","store","_","kp","cljs.core/array?","cljs.core.array_seq","query","indexed.db.impl.request/create-request","k","count","and__5043__auto__","direction","indexed.db.impl.store/key-path","indexed.db.impl.protocols/key-path","var_args","G__45146","indexed.db.impl.store/count","js/Error","indexed.db.impl.protocols/count","indexed.db.impl.store/get","key","indexed.db.impl.protocols/get","indexed.db.impl.store/get-key","indexed.db.impl.protocols/get-key","G__45153","indexed.db.impl.store/get-all","indexed.db.impl.protocols/get-all","indexed.db.impl.store.get_all","G__45157","indexed.db.impl.store/get-all-keys","indexed.db.impl.protocols/get-all-keys","indexed.db.impl.store.get_all_keys","G__45162","indexed.db.impl.store/open-cursor","indexed.db.impl.protocols/open-cursor","indexed.db.impl.store.open_cursor","G__45167","indexed.db.impl.store/open-key-cursor","indexed.db.impl.protocols/open-key-cursor","indexed.db.impl.store.open_key_cursor","indexed.db.impl.store/Index","indexed.db.impl.store/->Index","object-store","idb-index","cljs.core/name","indexed.db.impl.store.count","indexed.db.impl.store/index?","cljs.core/native-satisfies?","indexed.db.impl.protocols/IDBIndex","indexed.db.impl.store/create-index*","indexed.db.impl.store/auto-locale?","index","indexed.db.impl.protocols/auto-locale?","indexed.db.impl.store/locale","indexed.db.impl.protocols/locale","indexed.db.impl.store/multi-entry?","indexed.db.impl.protocols/multi-entry?","indexed.db.impl.store/unique?","indexed.db.impl.protocols/unique?","p__45177","map__45178","cljs.core/--destructure-map","cljs.core.get","indexed.db.impl.store/clj->index-parameters","unique?","multi-entry?","locale","params","indexed.db.impl.store/ObjectStore","indexed.db.impl.store/->ObjectStore","idb-store","value","index-name","key-path","object-parameters","key-path*","cljs.core/coll?","cljs.core.apply","cljs.core/array","item","indexed.db.impl.store/store?","indexed.db.impl.protocols/IDBObjectStore","indexed.db.impl.store/create-object-store","indexed.db.impl.store/index-names","indexed.db.impl.protocols/index-names","indexed.db.impl.store/auto-increment?","indexed.db.impl.protocols/auto-increment?","G__45181","indexed.db.impl.store/add","indexed.db.impl.protocols/add","indexed.db.impl.store.add","indexed.db.impl.store/clear","indexed.db.impl.protocols/clear","G__45183","indexed.db.impl.store/create-index","indexed.db.impl.protocols/create-index","indexed.db.impl.store.create_index","indexed.db.impl.store/delete","indexed.db.impl.protocols/delete-item","indexed.db.impl.store/delete-index","indexed.db.impl.protocols/delete-index","indexed.db.impl.store/index","indexed.db.impl.protocols/index","G__45185","indexed.db.impl.store/put","indexed.db.impl.protocols/put","indexed.db.impl.store/get-object-store","indexed.db.impl.protocols/idb-object-store"],"sourcesContent":["(ns ^:no-doc indexed.db.impl.store\n  (:require [indexed.db.impl.key-range :as key-range]\n            [indexed.db.impl.request :as request]\n            [indexed.db.impl.protocols :as impl])\n  (:refer-clojure :exclude [count get]))\n\n(defn key*\n  [x]\n  (if (key-range/key-range? x)\n    (key-range/idb-key-range x)\n    x))\n\n(deftype BaseObjectStore [store]\n  INamed\n  (-name [_] (.-name store))\n\n  impl/ReadableObjectStore\n  (key-path\n    [_]\n    (let [kp (.-keyPath store)]\n      (if (array? kp)\n        (array-seq kp)\n        kp)))\n  (count\n    [_ query]\n    (if (some? query)\n      (request/create-request (.count store (key* query)))\n      (request/create-request (.count store))))\n  (get\n    [_ k]\n    (request/create-request (.get store (key* k))))\n  (get-key\n    [_ k]\n    (request/create-request (.getKey store (key* k))))\n  (get-all\n    [_ query count]\n    (cond\n      (and query count) (request/create-request (.getAll store (key* query) count))\n      (some? query)     (request/create-request (.getAll store (key* query)))\n      :else             (request/create-request (.getAll store))))\n  (get-all-keys\n    [_ query count]\n    (cond\n      (and query count) (request/create-request (.getAllKeys store (key* query) count))\n      (some? query)     (request/create-request (.getAllKeys store (key* query)))\n      :else             (request/create-request (.getAllKeys store))))\n  (open-cursor\n    [_ query direction]\n    (cond\n      (and query direction) (request/create-request (.openCursor store (key* query) direction))\n      (some? query)         (request/create-request (.openCursor store (key* query)))\n      :else                 (request/create-request (.openCursor store))))\n  (open-key-cursor\n    [_ query direction]\n    (cond\n      (and query direction) (request/create-request (.openKeyCursor store (key* query) direction))\n      (some? query)         (request/create-request (.openKeyCursor store (key* query)))\n      :else                 (request/create-request (.openKeyCursor store)))))\n\n(defn key-path\n  [store]\n  (impl/key-path store))\n\n(defn count\n  ([store query]\n   (impl/count store query))\n  ([store]\n   (impl/count store nil)))\n\n(defn get\n  [store key]\n  (impl/get store key))\n\n(defn get-key\n  [store key]\n  (impl/get-key store key))\n\n(defn get-all\n  ([store query count]\n   (impl/get-all store query count))\n  ([store query]\n   (get-all store query nil))\n  ([store]\n   (get-all store nil nil)))\n\n(defn get-all-keys\n  ([store query count]\n   (impl/get-all-keys store query count))\n  ([store query]\n   (get-all-keys store query nil))\n  ([store]\n   (get-all-keys store nil nil)))\n\n(defn open-cursor\n  ([store query direction]\n   (impl/open-cursor store query direction))\n  ([store query]\n   (open-cursor store query nil))\n  ([store]\n   (open-cursor store nil nil)))\n\n(defn open-key-cursor\n  ([store query direction]\n   (impl/open-key-cursor store query direction))\n  ([store query]\n   (open-key-cursor store query nil))\n  ([store]\n   (open-key-cursor store nil nil)))\n\n(deftype Index [object-store idb-index]\n  INamed\n  (-name [_] (name object-store))\n\n  impl/ReadableObjectStore\n  (key-path [_] (key-path object-store))\n  (count [_ query] (count object-store query))\n  (get [_ key] (get object-store key))\n  (get-key [_ key] (get-key object-store key))\n  (get-all [_ query count] (get-all object-store query count))\n  (get-all-keys [_ query count] (get-all-keys object-store query count))\n  (open-cursor [_ query direction] (open-cursor object-store query direction))\n  (open-key-cursor [_ query direction] (open-key-cursor object-store query direction))\n\n  impl/IDBIndex\n  (auto-locale? [_] (.-isAutoLocale idb-index))\n  (locale [_] (.-locale idb-index))\n  (multi-entry? [_] (.-multiEntry idb-index))\n  (unique? [_] (.-unique idb-index))\n\n  impl/BelongsToObjectStore\n  (idb-object-store [_] (.-objectStore idb-index)))\n\n(defn index?\n  [x]\n  (satisfies? impl/IDBIndex x))\n\n(defn create-index*\n  [idb-index]\n  (-> idb-index\n      (BaseObjectStore.)\n      (Index. idb-index)))\n\n(defn auto-locale?\n  [index]\n  (impl/auto-locale? index))\n\n(defn locale\n  [index]\n  (impl/locale index))\n\n(defn multi-entry?\n  [index]\n  (impl/multi-entry? index))\n\n(defn unique?\n  [index]\n  (impl/unique? index))\n\n(defn clj->index-parameters\n  [{:keys [unique? multi-entry? locale]}]\n  (let [params #js {}]\n    (when (some? unique?)\n      (set! (.-unique params) unique?))\n    (when (some? multi-entry?)\n      (set! (.-multiEntry params) multi-entry?))\n    (when locale\n      (set! (.-locale params) locale))\n    params))\n\n(deftype ObjectStore [object-store idb-store]\n  INamed\n  (-name [_] (name object-store))\n\n  impl/BelongsToTransaction\n  (idb-transaction [_] (.-transaction idb-store))\n\n  impl/ReadableObjectStore\n  (key-path [_] (key-path object-store))\n  (count [_ query] (count object-store query))\n  (get [_ key] (get object-store key))\n  (get-key [_ key] (get-key object-store key))\n  (get-all [_ query count] (get-all object-store query count))\n  (get-all-keys [_ query count] (get-all-keys object-store query count))\n  (open-cursor [_ query direction] (open-cursor object-store query direction))\n  (open-key-cursor [_ query direction] (open-key-cursor object-store query direction))\n\n  impl/IDBObjectStore\n  (index-names [_] (array-seq (.-indexNames idb-store)))\n  (auto-increment? [_] (.-autoIncrement idb-store))\n  (add\n    [_ value key]\n    (if (some? key)\n      (request/create-request (.add idb-store value key))\n      (request/create-request (.add idb-store value))))\n  (clear\n    [_]\n    (request/create-request (.clear idb-store)))\n  (create-index\n    [_ index-name key-path object-parameters]\n    (let [key-path* (if (coll? key-path)\n                      (apply array key-path)\n                      key-path)\n          idb-index (.createIndex idb-store index-name key-path* (clj->index-parameters object-parameters))]\n      (create-index* idb-index)))\n  (delete-item\n    [_ k]\n    (request/create-request\n     (.delete idb-store (key* k))))\n  (delete-index\n    [_ index-name]\n    (request/create-request\n     (.deleteIndex idb-store index-name)))\n  (index\n    [_ index-name]\n    (create-index*\n     (.index idb-store index-name)))\n  (put\n    [_ item key]\n    (request/create-request\n     (if (some? key)\n       (.put idb-store item key)\n       (.put idb-store item)))))\n\n(defn store?\n  [x]\n  (satisfies? impl/IDBObjectStore x))\n\n(defn create-object-store\n  [idb-store]\n  (-> idb-store\n      (BaseObjectStore.)\n      (ObjectStore. idb-store)))\n\n(defn index-names\n  [store]\n  (impl/index-names store))\n\n(defn auto-increment?\n  [store]\n  (impl/auto-increment? store))\n\n(defn add\n  ([store value key]\n   (impl/add store value key))\n  ([store value]\n   (add store value nil)))\n\n(defn clear\n  [store]\n  (impl/clear store))\n\n(defn create-index\n  ([store index-name key-path object-parameters]\n   (impl/create-index store index-name key-path object-parameters))\n  ([store index-name key-path]\n   (create-index store index-name key-path {})))\n\n(defn delete\n  [store k]\n  (impl/delete-item store k))\n\n(defn delete-index\n  [store index-name]\n  (impl/delete-index store index-name))\n\n(defn index\n  [store index-name]\n  (impl/index store index-name))\n\n(defn put\n  ([store item]\n   (impl/put store item nil))\n  ([store item key]\n   (impl/put store item key)))\n\n(defn get-object-store\n  [index]\n  (create-object-store\n   (impl/idb-object-store index)))\n"]}