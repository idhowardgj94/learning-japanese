{"version":3,"sources":["datascript/db.cljc"],"mappings":"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","names":["datascript.db/Exception","js/Error","datascript.db/IllegalArgumentException","datascript.db/UnsupportedOperationException","datascript.db/e0","datascript.db/tx0","datascript.db/emax","datascript.db/txmax","datascript.db/implicit-schema","datascript.db/seqable?","x","cljs.core/seqable?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.db/conjv","cljs.core.fnil","cljs.core/conj","datascript.db/conjs","datascript.db/reduce-indexed","f","init","xs","cljs.core/first","cljs.core.reduce","p__46702","vec__46703","cljs.core.nth","acc","idx","res","cljs.core/reduced?","cljs.core/reduced","datascript.db/cljs-env?","env","cljs.core/boolean","datascript.db/combine-hashes","y","cljs.core/hash-combine","datascript$db$IDatom$datom_tx$dyn","x__5393__auto__","m__5394__auto__","datascript.db/datom-tx","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","datascript$db$IDatom$datom_added$dyn","datascript.db/datom-added","datascript$db$IDatom$datom_get_idx$dyn","datascript.db/datom-get-idx","datascript$db$IDatom$datom_set_idx$dyn","datascript.db/datom-set-idx","datascript.db/IDatom","this","value","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","datascript.db/Datom","datascript.db/->Datom","e","a","v","tx","_hash","d","_","datascript.db/hash-datom","o","and__5043__auto__","datascript.db/equiv-datom","datascript.db/seq-datom","k","datascript.db/val-at-datom","nf","i","datascript.db/nth-datom","not-found","datascript.db/assoc-datom","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","goog/exportSymbol","var_args","G__46707","datascript.db/datom","added","datascript.db/datom?","cljs.core/hash","cljs.core._EQ_","cljs.core/List","G__46708","G__46710","G__46711","G__46712","G__46713","cljs.core/Keyword","datascript.db.datom","datascript.db/datom-from-reader","vec","cljs.core.apply","datascript.db/cmp","cljs.core/long","cljs.core/compare","datascript.db/class-identical?","cljs.core/type","datascript.db/class-compare","datascript.db.goog$module$goog$array.defaultCompare","cljs.core/type->str","datascript.db/ihash","datascript.db/value-compare","e46718","cljs.core/native-satisfies?","cljs.core/IComparable","cljs.core/-compare","cljs.core/array?","datascript.db/value-cmp","datascript.db/cmp-datoms-eavt","d1","d2","c__45917__auto__","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.db/cmp-attr-quick","a1","a2","datascript.db/cmp-datoms-eav-quick","datascript.db/cmp-datoms-eavt-quick","datascript.db/cmp-datoms-aevt-quick","datascript.db/cmp-datoms-avet-quick","datascript.db/diff-sorted","b","cmp","only-a","only-b","both","cljs.core/empty?","cljs.core/not-empty","cljs.core.into","first-a","first-b","diff","e46725","cljs.core.conj","cljs.core/next","datascript$db$ISearch$_search$dyn","datascript.db/-search","datascript.db/ISearch","data","pattern","datascript.db/fsearch","datascript$db$IIndexAccess$_datoms$dyn","datascript.db/-datoms","datascript$db$IIndexAccess$_seek_datoms$dyn","datascript.db/-seek-datoms","datascript$db$IIndexAccess$_rseek_datoms$dyn","datascript.db/-rseek-datoms","datascript$db$IIndexAccess$_index_range$dyn","datascript.db/-index-range","datascript.db/IIndexAccess","db","index","components","attr","start","end","datascript.db/validate-indexed","temp__5757__auto__","datascript.db/indexing?","cljs.core.ex_info","cljs.core.pr_str","datascript$db$IDB$_schema$dyn","datascript.db/-schema","datascript$db$IDB$_attrs_by$dyn","datascript.db/-attrs-by","datascript.db/IDB","property","datascript.db/db-transient","cljs.core.update","cljs.core/transient","datascript.db/db-persistent!","cljs.core/persistent!","this__5343__auto__","k__5344__auto__","this__5345__auto__","k46729","else__5346__auto__","G__46733","schema","eavt","aevt","avet","max-eid","max-tx","rschema","pull-patterns","pull-attrs","hash","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","ret__5366__auto__","p__46734","vec__46735","k__5367__auto__","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core.concat","cljs.core/PersistentVector","G__46728","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this46730","other46731","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","this__5350__auto__","G__46738","this__5351__auto__","k__5352__auto__","pred__46739","cljs.core/keyword-identical?","expr__46740","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.db/DB","this__5389__auto__","writer__5390__auto__","G__46732","extmap__5385__auto__","G__46742","cljs.core/record?","datascript.db/->DB","datascript.db/map->DB","datascript.db/hash-db","other","datascript.db/equiv-db","cljs.core/-rseq","cljs.core/with-meta","G__46743","datascript.db/empty-db","cljs.core/meta","w","datascript.db/pr-db","key","fexpr__46746","vec__46747","p1__46726#","pred","multival?","me.tonsky.persistent_sorted_set.slice","cljs.core/->Eduction","cljs.core.filter","cs","datascript.db/components->pattern","me.tonsky.persistent_sorted_set.rslice","G__46744","G__46745","datascript.db/validate-attr","datascript.db/resolve-datom","datascript.db/db?","k46757","G__46761","unfiltered-db","p__46762","vec__46763","G__46756","this46758","other46759","G__46766","pred__46767","expr__46768","datascript.db/FilteredDB","G__46760","G__46770","datascript.db/->FilteredDB","datascript.db/map->FilteredDB","datascript.db/hash-fdb","datascript.db/unfiltered-db","datascript.db/attr->properties","G__46771","datascript.db/attr-tuples","m","tuple-attr","src-attr","cljs.core/assoc","datascript.db/rschema","cljs.core/reduce-kv","attr-schema","prop","datascript.db/validate-schema-key","expected","datascript.db/validate-schema","seq__46772","chunk__46773","count__46774","i__46775","vec__46794","temp__5753__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__46803","kv","comp?","cljs.core.not_EQ_","ex-data","attrs","cljs.core/sequential?","seq__46797","chunk__46799","count__46800","i__46801","seq__46806","chunk__46808","count__46809","i__46810","G__46813","datascript.db.empty_db","cljs.core/map?","cljs.core.merge","me.tonsky.persistent_sorted_set.sorted_set_by","datascript.lru/cache","cljs.core.atom","datascript.db/init-max-eid","or__5045__auto__","G__46815","datascript.db/init-db","datoms","datascript.db.init_db","not-datom","cljs.core.drop_while","indexed","arr","G__46816","me.tonsky.persistent-sorted-set.arrays/into-array","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/from-sorted-array","avet-datoms","avet-arr","cljs.core/to-array","cljs.core.transduce","cljs.core.map","cljs.core/max","p__46817","map__46818","cljs.core/--destructure-map","datascript.db/restore-db","datascript.db/equiv-db-index","ys","cljs.core/deref","h","cljs.core/reset!","p__46819","map__46820","datascript.db/db-from-reader","p__46821","vec__46822","t","default-e","default-tx","G__46825","G__46826","datascript.db/entid-some","datascript.db/ref?","datascript.db/entid-strict","p__46827","vec__46828","c0","c1","c2","c3","G__46831","k46833","G__46837","db-before","db-after","tx-data","tempids","tx-meta","p__46838","vec__46839","G__46832","this46834","other46835","G__46842","pred__46843","expr__46844","datascript.db/TxReport","G__46836","G__46846","datascript.db/->TxReport","datascript.db/map->TxReport","datascript.db/is-attr?","datascript.db/multival?","datascript.db/component?","datascript.db/tuple?","datascript.db/tuple-source?","datascript.db/entid","eid","vec__46847","cljs.core.array_seq","datascript.db/numeric-eid-exists?","datascript.db/validate-datom","datom","found","at","datascript.db/validate-val","datascript.db/current-tx","report","datascript.db/next-eid","datascript.db/tx-id?","datascript.db/tempid?","datascript.db/new-eid?","datascript.db/advance-max-eid","G__46850","G__46852","datascript.db/allocate-eid","G__46853","datascript.db/with-datom","indexing?","G__46854","me.tonsky.persistent-sorted-set/conj","temp__5755__auto__","removing","G__46855","me.tonsky.persistent-sorted-set/disj","datascript.db/queue-tuple","queue","tuple","tuple-value","cljs.core/vec","cljs.core.repeat","tuple-value'","datascript.db/queue-tuples","tuples","datascript.db/transact-report","report'","queue'","datascript.db/reverse-ref?","cljs.core/name","cljs.core/re-matches","datascript.db/reverse-ref","cljs.core.keyword","cljs.core/namespace","cljs.core.subs","vec__46856","ns","name","datascript.db/resolve-upserts","entity","idents","resolve","split","vs","p__46859","vec__46860","entity'","upserts","cljs.core/coll?","vec__46863","insert","upsert","G__46866","G__46867","datascript.db/validate-upserts","upsert-ids","v->e","vec__46868","vec__46871","vec__46874","vec__46877","e1","v1","e2","v2","cljs.core/second","vec__46880","vec__46883","upsert-id","datascript.db/maybe-wrap-multival","datascript.db/explode","a+vs","cljs.core/concat","p__46886","vec__46887","iter__5523__auto__","s__46891","cljs.core/LazySeq","xs__6308__auto__","vec__46896","iterys__5519__auto__","s__46893","c__5521__auto__","size__5522__auto__","b__46895","cljs.core/chunk-buffer","i__46894","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46892","cljs.core/cons","cljs.core/rest","fs__5520__auto__","iter__46890","reverse?","straight-a","p__46899","vec__46900","datascript.db/transact-add","ent","new-datom","old-datom","datascript.db/transact-retract-datom","datascript.db/retract-components","cljs.core.comp","datascript.db/retry-with-tempid","initial-report","es","tempid","upserted-eid","cljs.core.get_in","tempids'","datascript.db/transact-tx-data","datascript.db/builtin-fn?","datascript.db/flush-tuples","attr-tuples","entities","tuples+values","cljs.core/every?","cljs.core/nil?","current","datascript.db/check-value-tempids","temp__5751__auto__","all-tempids","reduce-fn","cljs.core.dissoc_BANG_","unused","cljs.core.sort","cljs.core/vals","initial-es","initial-report'","has-tuples?","initial-es'","cljs.core.interleave","vec__46925","seq__46926","first__46927","cljs.core/update","cljs.core/inc","old-eid","vec__46928","id","datascript.db.allocate_eid","new-eid","new-entity","vec__46931","op","vec__46934","seq__46935","first__46936","args","cljs.core/not","ident","fun","cljs.core/fn?","vec__46937","ov","nv","cljs.core/some","resolved","allocated-eid","tuple-attrs","cljs.core/some?","p__46940","vec__46941","db-value","cljs.core/vector","e-datoms","v-datoms","cljs.core.mapcat","vec__46944"],"sourcesContent":["(ns ^:no-doc ^:lean-ns datascript.db\n  (:require\n    #?(:cljs [goog.array :as garray])\n    [clojure.walk]\n    [clojure.data]\n    #?(:clj [datascript.inline :refer [update]])\n    [datascript.lru :as lru]\n    [me.tonsky.persistent-sorted-set :as set]\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:clj (:import clojure.lang.IFn$OOL))\n  #?(:cljs (:require-macros [datascript.db :refer [case-tree combine-cmp cond+ defcomp defrecord-updatable int-compare raise]]))\n  (:refer-clojure :exclude [seqable? #?(:clj update)]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ----------------------------------------------------------------------------\n\n#?(:cljs\n   (do\n     (def Exception js/Error)\n     (def IllegalArgumentException js/Error)\n     (def UnsupportedOperationException js/Error)))\n\n(def ^:const e0    0)\n(def ^:const tx0   0x20000000)\n(def ^:const emax  0x7FFFFFFF)\n(def ^:const txmax 0x7FFFFFFF)\n(def ^:const implicit-schema {:db/ident {:db/unique :db.unique/identity}})\n\n;; ----------------------------------------------------------------------------\n\n#?(:clj\n  (defmacro raise [& fragments]\n    (let [msgs (butlast fragments)\n          data (last fragments)]\n      `(throw (ex-info (str ~@(map (fn [m#] (if (string? m#) m# (list 'pr-str m#))) msgs)) ~data)))))\n\n(defn #?@(:clj  [^Boolean seqable?]  \n          :cljs [^boolean seqable?])\n  [x]\n  (and (not (string? x))\n  #?(:cljs (or (cljs.core/seqable? x)\n               (arrays/array? x))\n     :clj  (or (seq? x)\n               (instance? clojure.lang.Seqable x)\n               (nil? x)\n               (instance? Iterable x)\n               (arrays/array? x)\n               (instance? java.util.Map x)))))\n\n#?(:clj\n  (defmacro cond+ [& clauses]\n    (when-some [[test expr & rest] clauses]\n      (case test\n        :do   `(do ~expr (cond+ ~@rest))\n        :let  `(let ~expr (cond+ ~@rest))\n        :some `(or ~expr (cond+ ~@rest))\n              `(if ~test ~expr (cond+ ~@rest))))))\n\n#?(:clj\n(defmacro some-of\n  ([] nil)\n  ([x] x)\n  ([x & more]\n    `(let [x# ~x] (if (nil? x#) (some-of ~@more) x#)))))\n\n(def conjv (fnil conj []))\n(def conjs (fnil conj #{}))\n\n(defn reduce-indexed\n  \"Same as reduce, but `f` takes [acc el idx]\"\n  [f init xs]\n  (first\n    (reduce\n      (fn [[acc idx] x]\n        (let [res (f acc x idx)]\n          (if (reduced? res)\n            (reduced [res idx])\n            [res (inc idx)])))\n      [init 0]\n      xs)))\n\n;; ----------------------------------------------------------------------------\n;; macros and funcs to support writing defrecords and updating\n;; (replacing) builtins, i.e., Object/hashCode, IHashEq hasheq, etc.\n;; code taken from prismatic:\n;;  https://github.com/Prismatic/schema/commit/e31c419c56555c83ef9ee834801e13ef3c112597\n;;\n\n(defn- cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n#?(:clj\n   (defmacro if-cljs\n     \"Return then if we are generating cljs code and else for Clojure code.\n     https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\n     [then else]\n     (if (cljs-env? &env) then else)))\n\n(defn combine-hashes [x y]\n  #?(:clj  (clojure.lang.Util/hashCombine x y)\n     :cljs (hash-combine x y)))\n\n#?(:clj\n   (defn- get-sig [method]\n     ;; expects something like '(method-symbol [arg arg arg] ...)\n     ;; if the thing matches, returns [fully-qualified-symbol arity], otherwise nil\n     (and (sequential? method)\n          (symbol? (first method))\n          (vector? (second method))\n          (let [sym (first method)\n                ns  (or (some->> sym resolve meta :ns str) \"clojure.core\")]\n            [(symbol ns (name sym)) (-> method second count)]))))\n\n#?(:clj\n   (defn- dedupe-interfaces [deftype-form]\n     ;; get the interfaces list, remove any duplicates, similar to remove-nil-implements in potemkin\n     ;; verified w/ deftype impl in compiler:\n     ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)\n     (let [[deftype* tagname classname fields implements interfaces & rest] deftype-form]\n       (when (or (not= deftype* 'deftype*) (not= implements :implements))\n         (throw (IllegalArgumentException. \"deftype-form mismatch\")))\n       (list* deftype* tagname classname fields implements (vec (distinct interfaces)) rest))))\n\n#?(:clj\n   (defn- make-record-updatable-clj [name fields & impls]\n     (let [impl-map (->> impls (map (juxt get-sig identity)) (filter first) (into {}))\n           body     (macroexpand-1 (list* 'defrecord name fields impls))]\n       (clojure.walk/postwalk\n        (fn [form]\n          (if (and (sequential? form) (= 'deftype* (first form)))\n            (->> form\n                 dedupe-interfaces\n                 (remove (fn [method]\n                           (when-some [impl (-> method get-sig impl-map)]\n                             (not= method impl)))))\n            form))\n        body))))\n\n#?(:clj\n   (defn- make-record-updatable-cljs [name fields & impls]\n     `(do\n        (defrecord ~name ~fields)\n        (extend-type ~name ~@impls))))\n\n#?(:clj\n   (defmacro defrecord-updatable [name fields & impls]\n     `(if-cljs\n       ~(apply make-record-updatable-cljs name fields impls)\n       ~(apply make-record-updatable-clj  name fields impls))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-datom equiv-datom seq-datom nth-datom assoc-datom val-at-datom)\n\n(defprotocol IDatom\n  (datom-tx [this])\n  (datom-added [this])\n  (datom-get-idx [this])\n  (datom-set-idx [this value]))\n\n(deftype Datom #?(:clj [^int e a v ^int tx ^:unsynchronized-mutable ^int idx ^:unsynchronized-mutable ^int _hash]\n                  :cljs [^number e a v ^number tx ^:mutable ^number idx ^:mutable ^number _hash])\n  IDatom\n  (datom-tx [d] (if (pos? tx) tx (- tx)))\n  (datom-added [d] (pos? tx))\n  (datom-get-idx [_] idx)\n  (datom-set-idx [_ value] (set! idx (int value)))\n\n  #?@(:cljs\n       [IHash\n        (-hash [d] (if (zero? _hash)\n                     (set! _hash (hash-datom d))\n                     _hash))\n        IEquiv\n        (-equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n\n        ISeqable\n        (-seq [d] (seq-datom d))\n\n        ILookup\n        (-lookup [d k] (val-at-datom d k nil))\n        (-lookup [d k nf] (val-at-datom d k nf))\n\n        IIndexed\n        (-nth [this i] (nth-datom this i))\n        (-nth [this i not-found] (nth-datom this i not-found))\n        \n        IAssociative\n        (-assoc [d k v] (assoc-datom d k v))\n\n        IPrintWithWriter\n        (-pr-writer [d writer opts]\n                    (pr-sequential-writer writer pr-writer\n                                          \"#datascript/Datom [\" \" \" \"]\"\n                                          opts [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))]\n      :clj\n       [Object\n        (hashCode [d]\n          (if (zero? _hash)\n            (let [h (int (hash-datom d))]\n              (set! _hash h)\n              h)\n            _hash))\n        (toString [d] (pr-str d))\n\n        clojure.lang.IHashEq\n        (hasheq [d] (.hashCode d))\n\n        clojure.lang.Seqable\n        (seq [d] (seq-datom d))\n\n        clojure.lang.IPersistentCollection\n        (equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n        (empty [d] (throw (UnsupportedOperationException. \"empty is not supported on Datom\")))\n        (count [d] 5)\n        (cons [d [k v]] (assoc-datom d k v))\n        \n        clojure.lang.Indexed\n        (nth [this i]           (nth-datom this i))\n        (nth [this i not-found] (nth-datom this i not-found))\n\n        clojure.lang.ILookup\n        (valAt [d k] (val-at-datom d k nil))\n        (valAt [d k nf] (val-at-datom d k nf))\n\n        clojure.lang.Associative\n        (entryAt [d k] (some->> (val-at-datom d k nil) (clojure.lang.MapEntry k)))\n        (containsKey [e k] (#{:e :a :v :tx :added} k))\n        (assoc [d k v] (assoc-datom d k v))]\n))\n\n#?(:cljs (goog/exportSymbol \"datascript.db.Datom\" Datom))\n\n(defn ^Datom datom\n  ([e a v] (Datom. e a v tx0 0 0))\n  ([e a v tx] (Datom. e a v tx 0 0))\n  ([e a v tx added] (Datom. e a v (if added tx (- tx)) 0 0)))\n\n(defn datom? [x] (instance? Datom x))\n\n(defn- hash-datom [^Datom d]\n  (-> (hash (.-e d))\n      (combine-hashes (hash (.-a d)))\n      (combine-hashes (hash (.-v d)))))\n\n(defn- equiv-datom [^Datom d ^Datom o]\n  (and (== (.-e d) (.-e o))\n       (= (.-a d) (.-a o))\n       (= (.-v d) (.-v o))))\n\n(defn- seq-datom [^Datom d]\n  (list (.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)))\n\n;; keep it fast by duplicating for both keyword and string cases\n;; instead of using sets or some other matching func\n(defn- val-at-datom [^Datom d k not-found]\n  (case k\n    :e      (.-e d) \"e\"     (.-e d)\n    :a      (.-a d) \"a\"     (.-a d)\n    :v      (.-v d) \"v\"     (.-v d)\n    :tx     (datom-tx d)\n    \"tx\"    (datom-tx d)\n    :added  (datom-added d)\n    \"added\" (datom-added d)\n    not-found))\n\n(defn- nth-datom\n  ([^Datom d ^long i]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        #?(:clj  (throw (IndexOutOfBoundsException.))\n           :cljs (throw (js/Error. (str \"Datom/-nth: Index out of bounds: \" i))))))\n  ([^Datom d ^long i not-found]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        not-found)))\n\n(defn- ^Datom assoc-datom [^Datom d k v]\n  (case k\n    :e     (datom v       (.-a d) (.-v d) (datom-tx d) (datom-added d))\n    :a     (datom (.-e d) v       (.-v d) (datom-tx d) (datom-added d))\n    :v     (datom (.-e d) (.-a d) v       (datom-tx d) (datom-added d))\n    :tx    (datom (.-e d) (.-a d) (.-v d) v            (datom-added d))\n    :added (datom (.-e d) (.-a d) (.-v d) (datom-tx d) v)\n    (throw (IllegalArgumentException. (str \"invalid key for #datascript/Datom: \" k)))))\n\n;; printing and reading\n;; #datomic/DB {:schema <map>, :datoms <vector of [e a v tx]>}\n\n(defn ^Datom datom-from-reader [vec]\n  (apply datom vec))\n\n#?(:clj\n   (defmethod print-method Datom [^Datom d, ^java.io.Writer w]\n     (.write w (str \"#datascript/Datom \"))\n     (binding [*out* w]\n       (pr [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))))\n\n;; ----------------------------------------------------------------------------\n;; datom cmp macros/funcs\n;;\n\n#?(:clj\n    (defmacro combine-cmp [& comps]\n      (loop [comps (reverse comps)\n             res   (num 0)]\n        (if (not-empty comps)\n          (recur\n            (next comps)\n            `(let [c# ~(first comps)]\n               (if (== 0 c#)\n                 ~res\n                 c#)))\n          res))))\n\n#?(:clj\n   (defn- -case-tree [queries variants]\n     (if queries\n       (let [v1 (take (/ (count variants) 2) variants)\n             v2 (drop (/ (count variants) 2) variants)]\n         (list 'if (first queries)\n               (-case-tree (next queries) v1)\n               (-case-tree (next queries) v2)))\n       (first variants))))\n\n#?(:clj\n   (defmacro case-tree [qs vs]\n     (-case-tree qs vs)))\n\n(defn cmp\n  #?(:clj\n     {:inline\n      (fn [x y]\n        `(let [x# ~x y# ~y]\n           (if (nil? x#) 0 (if (nil? y#) 0 (long (compare x# y#))))))})\n  ^long [x y]\n  (if (nil? x) 0 (if (nil? y) 0 (long (compare x y)))))\n\n(defn class-identical?\n  #?(:clj  {:inline (fn [x y] `(identical? (class ~x) (class ~y)))})\n  [x y]\n  #?(:clj  (identical? (class x) (class y))\n     :cljs (identical? (type x) (type y))))\n\n#?(:clj\n   (defn class-name\n     {:inline\n      (fn [x]\n        `(let [^Object x# ~x]\n           (if (nil? x#) x# (.getName (. x# (getClass))))))}\n     ^String [^Object x] (if (nil? x) x (.getName (. x (getClass))))))\n\n(defn class-compare\n  ^long [x y]\n  #?(:clj  (long (compare (class-name x) (class-name y)))\n     :cljs (garray/defaultCompare (type->str (type x)) (type->str (type y)))))\n\n#?(:clj\n    (defmacro int-compare [x y]\n      `(if-cljs\n         (- ~x ~y)\n         (long (Integer/compare ~x ~y)))))\n\n(defn ihash\n  {:inline (fn [x] `(. clojure.lang.Util (hasheq ~x)))}\n  ^long [x]\n  #?(:clj  (. clojure.lang.Util (hasheq x))\n     :cljs (hash x)))\n\n(defn value-compare\n  ^long [x y]\n  (try\n    (cond\n      (= x y) 0\n      #?@(:clj  [(instance? Number x)       (clojure.lang.Numbers/compare x y)])\n      #?@(:clj  [(instance? Comparable x)   (.compareTo ^Comparable x y)]\n          :cljs [(satisfies? IComparable x) (-compare x y)])\n      (not (class-identical? x y)) (class-compare x y)\n      #?@(:cljs [(or (number? x) (string? x) (array? x) (true? x) (false? x)) (garray/defaultCompare x y)])\n      :else (int-compare (ihash x) (ihash y)))\n    (catch #?(:clj ClassCastException :cljs js/Error) e\n      (if (not (class-identical? x y))\n        (class-compare x y)\n        (throw e)))))\n\n(defn value-cmp\n  #?(:clj\n     {:inline\n      (fn [x y]\n        `(let [x# ~x y# ~y]\n           (if (nil? x#) 0 (if (nil? y#) 0 (value-compare x# y#)))))})\n  ^long [x y]\n  (if (nil? x)\n    0\n    (if (nil? y)\n      0\n      (value-compare x y))))\n\n;; Slower cmp-* fns allows for datom fields to be nil.\n;; Such datoms come from slice method where they are used as boundary markers.\n\n#?(:clj\n   (defmacro defcomp [sym [arg1 arg2] & body]\n     (let [a1 (with-meta arg1 {})\n           a2 (with-meta arg2 {})]\n       `(if-cljs\n          (defn ~sym [~arg1 ~arg2]\n            ~@body)\n          (def ~sym\n            (reify\n              java.util.Comparator\n              (compare [_# ~a1 ~a2]\n                (let [~arg1 ~arg1 ~arg2 ~arg2]\n                  ~@body))\n              clojure.lang.IFn\n              (invoke [this# ~a1 ~a2]\n                (.compare this# ~a1 ~a2))\n              IFn$OOL\n              (invokePrim [this# ~a1 ~a2]\n                (.compare this# ~a1 ~a2))))))))\n\n(defcomp cmp-datoms-eavt ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (int-compare (.-e d1) (.-e d2))\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (int-compare (datom-tx d1) (datom-tx d2))))\n\n(defcomp cmp-datoms-aevt ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (int-compare (.-e d1) (.-e d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (int-compare (datom-tx d1) (datom-tx d2))))\n\n(defcomp cmp-datoms-avet ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (int-compare (.-e d1) (.-e d2))\n    (int-compare (datom-tx d1) (datom-tx d2))))\n\n;; fast versions without nil checks\n\n(defn- cmp-attr-quick\n  #?(:clj\n     {:inline\n      (fn [a1 a2]\n        `(long (.compareTo ~(with-meta a1 {:tag \"Comparable\"}) ~a2)))})\n  ^long [a1 a2]\n  ;; either both are keywords or both are strings\n  #?(:cljs\n     (if (keyword? a1)\n       (-compare a1 a2)\n       (garray/defaultCompare a1 a2))\n     :clj\n     (.compareTo ^Comparable a1 a2)))\n\n(defcomp cmp-datoms-eav-quick ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (int-compare (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))))\n\n(defcomp cmp-datoms-eavt-quick ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (int-compare (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (int-compare (datom-tx d1) (datom-tx d2))))\n\n(defcomp cmp-datoms-aevt-quick ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (int-compare (.-e d1) (.-e d2))\n    (value-compare (.-v d1) (.-v d2))\n    (int-compare (datom-tx d1) (datom-tx d2))))\n\n(defcomp cmp-datoms-avet-quick ^long [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (int-compare (.-e d1) (.-e d2))\n    (int-compare (datom-tx d1) (datom-tx d2))))\n\n(defn- diff-sorted [a b cmp]\n  (loop [only-a []\n         only-b []\n         both   []\n         a      a\n         b      b]\n    (cond\n      (empty? a) [(not-empty only-a) (not-empty (into only-b b)) (not-empty both)]\n      (empty? b) [(not-empty (into only-a a)) (not-empty only-b) (not-empty both)]\n      :else\n      (let [first-a (first a)\n            first-b (first b)\n            diff (try\n                   (cmp first-a first-b)\n                   (catch #?(:clj ClassCastException :cljs js/Error) _\n                     :incomparable))]\n        (cond\n          (= diff :incomparable) (recur (conj only-a first-a) (conj only-b first-b) both                (next a) (next b))\n          (== diff 0)            (recur only-a                only-b                (conj both first-a) (next a) (next b))\n          (< diff 0)             (recur (conj only-a first-a) only-b                both                (next a) b)\n          (> diff 0)             (recur only-a                (conj only-b first-b) both                a        (next b)))))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-db hash-fdb equiv-db empty-db resolve-datom validate-attr components->pattern indexing?)\n#?(:cljs (declare pr-db))\n\n;;;;;;;;;; Searching\n\n(defprotocol ISearch\n  (-search [data pattern]))\n\n(defn- ^Datom fsearch [data pattern]\n  (first (-search data pattern)))\n\n(defprotocol IIndexAccess\n  (-datoms [db index components])\n  (-seek-datoms [db index components])\n  (-rseek-datoms [db index components])\n  (-index-range [db attr start end]))\n\n(defn validate-indexed [db index components]\n  (when (= index :avet)\n    (when-some [attr (first components)]\n      (when-not (indexing? db attr)\n        (raise \"Attribute \" attr \" should be marked as :db/index true\"\n          {:error :index-access :index :avet :components components})))))\n\n(defprotocol IDB\n  (-schema [db])\n  (-attrs-by [db property]))\n\n;; ----------------------------------------------------------------------------\n\n(defn db-transient [db]\n  (-> db\n    (update :eavt transient)\n    (update :aevt transient)\n    (update :avet transient)))\n\n(defn db-persistent! [db]\n  (-> db\n    (update :eavt persistent!)\n    (update :aevt persistent!)\n    (update :avet persistent!)))\n\n#?(:clj\n    (defn vpred [v]\n      (cond\n        (string? v)  (fn [x] (if (string? x) (.equals ^String v x) false))\n        (int? v)     (fn [x] (if (int? x) (= (long v) (long x)) false))\n        (keyword? v) (fn [x] (.equals ^Object v x))\n        (nil? v)     (fn [x] (nil? x))\n        :else        (fn [x] (= v x)))))\n\n(defrecord-updatable DB [schema eavt aevt avet max-eid max-tx rschema pull-patterns pull-attrs hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-db db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       IReversible          (-rseq  [db]        (-rseq (.-eavt db)))\n       ICounted             (-count [db]        (count (.-eavt db)))\n       IEmptyableCollection (-empty [db]        (with-meta (empty-db (.-schema db)) (meta db)))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n       IEditableCollection  (-as-transient [db] (db-transient db))\n       ITransientCollection (-conj! [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (-persistent! [db] (db-persistent! db))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-db db))\n       clojure.lang.IHashEq (hasheq [db]        (hash-db db))\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count eavt))\n                            (equiv [db other]   (equiv-db db other))\n       clojure.lang.IEditableCollection \n                            (empty [db]         (with-meta (empty-db schema) (meta db)))\n                            (asTransient [db] (db-transient db))\n       clojure.lang.ITransientCollection\n                            (conj [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (persistent [db] (db-persistent! db))])\n\n  IDB\n  (-schema [db] (.-schema db))\n  (-attrs-by [db property] ((.-rschema db) property))\n\n  ISearch\n  (-search [db pattern]\n    (let [[e a v tx] pattern\n          eavt       (.-eavt db)\n          aevt       (.-aevt db)\n          avet       (.-avet db)\n          pred       #?(:clj  (vpred v)\n                        :cljs #(= v %))\n          multival?  (contains? (-attrs-by db :db.cardinality/many) a)]\n      (case-tree [e a (some? v) tx]\n        [(set/slice eavt (datom e a v tx) (datom e a v tx))                   ;; e a v tx\n         (set/slice eavt (datom e a v tx0) (datom e a v txmax))               ;; e a v _\n         (->> (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))      ;; e a _ tx\n           (->Eduction (filter (fn [^Datom d] (= tx (datom-tx d))))))\n         (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))           ;; e a _ _\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v tx\n           (->Eduction (filter (fn [^Datom d] (and (pred (.-v d))\n                                                   (= tx (datom-tx d)))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v _\n           (->Eduction (filter (fn [^Datom d] (pred (.-v d))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ _ tx\n           (->Eduction (filter (fn [^Datom d] (= tx (datom-tx d))))))\n         (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))       ;; e _ _ _\n         (if (indexing? db a)                                                 ;; _ a v tx\n           (->> (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))      \n             (->Eduction (filter (fn [^Datom d] (= tx (datom-tx d))))))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n             (->Eduction (filter (fn [^Datom d] (and (pred (.-v d))\n                                                     (= tx (datom-tx d))))))))\n         (if (indexing? db a)                                                 ;; _ a v _\n           (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n             (->Eduction (filter (fn [^Datom d] (pred (.-v d)))))))\n         (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))  ;; _ a _ tx\n           (->Eduction (filter (fn [^Datom d] (= tx (datom-tx d))))))\n         (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))       ;; _ a _ _\n         (filter (fn [^Datom d] (and (pred (.-v d))\n                                  (= tx (datom-tx d)))) eavt)                 ;; _ _ v tx\n         (filter (fn [^Datom d] (pred (.-v d))) eavt)                         ;; _ _ v \n         (filter (fn [^Datom d] (= tx (datom-tx d))) eavt)                    ;; _ _ _ tx\n         eavt])))                                                             ;; _ _ _ _\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (components->pattern db index cs emax txmax)))\n\n  (-seek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (datom emax nil nil txmax)))\n\n  (-rseek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/rslice (get db index) (components->pattern db index cs emax txmax) (datom e0 nil nil tx0)))\n\n  (-index-range [db attr start end]\n    (validate-indexed db :avet [attr])\n    (validate-attr attr (list '-index-range 'db attr start end))\n    (set/slice (.-avet db)\n      (resolve-datom db nil attr start nil e0 tx0)\n      (resolve-datom db nil attr end nil emax txmax)))\n                \n  clojure.data/EqualityPartition\n  (equality-partition [x] :datascript/db)\n\n  clojure.data/Diff\n  (diff-similar [a b]\n    (diff-sorted (:eavt a) (:eavt b) cmp-datoms-eav-quick)))\n\n(defn db? [x]\n  #?(:clj\n     (or\n      (and x\n           (instance? datascript.db.ISearch x)\n           (instance? datascript.db.IIndexAccess x)\n           (instance? datascript.db.IDB x))\n      (and (satisfies? ISearch x)\n           (satisfies? IIndexAccess x)\n           (satisfies? IDB x)))\n     :cljs\n     (and (satisfies? ISearch x)\n          (satisfies? IIndexAccess x)\n          (satisfies? IDB x))))\n\n;; ----------------------------------------------------------------------------\n(defrecord-updatable FilteredDB [unfiltered-db pred hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-fdb db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ICounted             (-count [db]        (count (-datoms db :eavt [])))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n\n       IEmptyableCollection (-empty [_]         (throw (js/Error. \"-empty is not supported on FilteredDB\")))\n\n       ILookup              (-lookup ([_ _]     (throw (js/Error. \"-lookup is not supported on FilteredDB\")))\n                                     ([_ _ _]   (throw (js/Error. \"-lookup is not supported on FilteredDB\"))))\n\n\n       IAssociative         (-contains-key? [_ _] (throw (js/Error. \"-contains-key? is not supported on FilteredDB\")))\n                            (-assoc [_ _ _]       (throw (js/Error. \"-assoc is not supported on FilteredDB\")))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-fdb db))\n\n       clojure.lang.IHashEq (hasheq [db]        (hash-fdb db))\n\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count (-datoms db :eavt [])))\n                            (equiv [db o]       (equiv-db db o))\n                            (cons [db [k v]]    (throw (UnsupportedOperationException. \"cons is not supported on FilteredDB\")))\n                            (empty [db]         (throw (UnsupportedOperationException. \"empty is not supported on FilteredDB\")))\n\n       clojure.lang.ILookup (valAt [db k]       (throw (UnsupportedOperationException. \"valAt/2 is not supported on FilteredDB\")))\n                            (valAt [db k nf]    (throw (UnsupportedOperationException. \"valAt/3 is not supported on FilteredDB\")))\n       clojure.lang.IKeywordLookup (getLookupThunk [db k]\n                                                (throw (UnsupportedOperationException. \"getLookupThunk is not supported on FilteredDB\")))\n\n       clojure.lang.Associative\n                            (containsKey [e k]  (throw (UnsupportedOperationException. \"containsKey is not supported on FilteredDB\")))\n                            (entryAt [db k]     (throw (UnsupportedOperationException. \"entryAt is not supported on FilteredDB\")))\n                            (assoc [db k v]     (throw (UnsupportedOperationException. \"assoc is not supported on FilteredDB\")))])\n\n  IDB\n  (-schema [db]\n    (-schema (.-unfiltered-db db)))\n\n  (-attrs-by [db property]\n    (-attrs-by (.-unfiltered-db db) property))\n\n  ISearch\n  (-search [db pattern]\n    (filter (.-pred db) (-search (.-unfiltered-db db) pattern)))\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (filter (.-pred db) (-datoms (.-unfiltered-db db) index cs)))\n\n  (-seek-datoms [db index cs]\n    (filter (.-pred db) (-seek-datoms (.-unfiltered-db db) index cs)))\n\n  (-rseek-datoms [db index cs]\n    (filter (.-pred db) (-rseek-datoms (.-unfiltered-db db) index cs)))\n\n  (-index-range [db attr start end]\n    (filter (.-pred db) (-index-range (.-unfiltered-db db) attr start end))))\n\n(defn unfiltered-db ^DB [db]\n  (if (instance? FilteredDB db)\n    (.-unfiltered-db ^FilteredDB db)\n    db))\n\n;; ----------------------------------------------------------------------------\n\n(defn attr->properties [k v]\n  (case v\n    :db.unique/identity  [:db/unique :db.unique/identity :db/index]\n    :db.unique/value     [:db/unique :db.unique/value :db/index]\n    :db.cardinality/many [:db.cardinality/many]\n    :db.type/ref         [:db.type/ref :db/index]\n    (cond\n      (and (= :db/isComponent k) (true? v)) [:db/isComponent]\n      (and (= :db/index k) (true? v))       [:db/index]\n      (= :db/tupleAttrs k)                  [:db.type/tuple :db/index]\n      :else [])))\n\n(defn attr-tuples\n  \"e.g. :reg/semester => #{:reg/semester+course+student ...}\"\n  [schema rschema]\n  (reduce\n    (fn [m tuple-attr] ;; e.g. :reg/semester+course+student\n      (reduce-indexed\n        (fn [m src-attr idx] ;; e.g. :reg/semester\n          (update m src-attr assoc tuple-attr idx))\n        m\n        (-> schema (get tuple-attr) :db/tupleAttrs)))\n    {}\n    (:db.type/tuple rschema)))\n\n(defn- rschema\n  \":db/unique           => #{attr ...}\n   :db.unique/identity  => #{attr ...}\n   :db.unique/value     => #{attr ...}\n   :db/index            => #{attr ...}\n   :db.cardinality/many => #{attr ...}\n   :db.type/ref         => #{attr ...}\n   :db/isComponent      => #{attr ...}\n   :db.type/tuple       => #{attr ...}\n   :db/attrTuples       => {attr => {tuple-attr => idx}}\"\n  [schema]\n  (let [rschema (reduce-kv\n                  (fn [rschema attr attr-schema]\n                    (reduce-kv\n                      (fn [rschema key value]\n                        (reduce\n                          (fn [rschema prop]\n                            (update rschema prop conjs attr))\n                          rschema (attr->properties key value)))\n                      rschema attr-schema))\n                  {} schema)]\n    (assoc rschema :db/attrTuples (attr-tuples schema rschema))))\n\n(defn- validate-schema-key [a k v expected]\n  (when-not (or (nil? v)\n                (contains? expected v))\n    (throw (ex-info (str \"Bad attribute specification for \" (pr-str {a {k v}}) \", expected one of \" expected)\n                    {:error :schema/validation\n                     :attribute a\n                     :key k\n                     :value v}))))\n\n(defn- validate-schema [schema]\n  (doseq [[a kv] schema]\n\n    ;; isComponent\n    (let [comp? (:db/isComponent kv false)]\n      (validate-schema-key a :db/isComponent (:db/isComponent kv) #{true false})\n      (when (and comp? (not= (:db/valueType kv) :db.type/ref))\n        (raise \"Bad attribute specification for \" a \": {:db/isComponent true} should also have {:db/valueType :db.type/ref}\"\n          {:error     :schema/validation\n           :attribute a\n           :key       :db/isComponent})))\n\n    (validate-schema-key a :db/unique (:db/unique kv) #{:db.unique/value :db.unique/identity})\n    (validate-schema-key a :db/valueType (:db/valueType kv) #{:db.type/ref :db.type/tuple})\n    (validate-schema-key a :db/cardinality (:db/cardinality kv) #{:db.cardinality/one :db.cardinality/many})\n\n    ;; tuple should have tupleAttrs\n    (when (and (= :db.type/tuple (:db/valueType kv))\n               (not (contains? kv :db/tupleAttrs)))\n      (raise \"Bad attribute specification for \" a \": {:db/valueType :db.type/tuple} should also have :db/tupleAttrs\"\n             {:error :schema/validation\n              :attribute a\n              :key :db/valueType}))\n\n    ;; :db/tupleAttrs is a non-empty sequential coll\n    (when (contains? kv :db/tupleAttrs)\n      (let [ex-data {:error :schema/validation\n                     :attribute a\n                     :key :db/tupleAttrs}]\n        (when (= :db.cardinality/many (:db/cardinality kv))\n          (raise a \" has :db/tupleAttrs, must be :db.cardinality/one\" ex-data))\n\n        (let [attrs (:db/tupleAttrs kv)]\n          (when-not (sequential? attrs)\n            (raise a \" :db/tupleAttrs must be a sequential collection, got: \" attrs ex-data))\n\n          (when (empty? attrs)\n            (raise a \" :db/tupleAttrs can\u2019t be empty\" ex-data))\n\n          (doseq [attr attrs\n                  :let [ex-data (assoc ex-data :value attr)]]\n            (when (contains? (get schema attr) :db/tupleAttrs)\n              (raise a \" :db/tupleAttrs can\u2019t depend on another tuple attribute: \" attr ex-data))\n\n            (when (= :db.cardinality/many (:db/cardinality (get schema attr)))\n              (raise a \" :db/tupleAttrs can\u2019t depend on :db.cardinality/many attribute: \" attr ex-data))))))))\n\n(defn ^DB empty-db\n  ([] (empty-db nil))\n  ([schema]\n    {:pre [(or (nil? schema) (map? schema))]}\n    (validate-schema schema)\n    (map->DB\n      {:schema        schema\n       :rschema       (rschema (merge implicit-schema schema))\n       :eavt          (set/sorted-set-by cmp-datoms-eavt)\n       :aevt          (set/sorted-set-by cmp-datoms-aevt)\n       :avet          (set/sorted-set-by cmp-datoms-avet)\n       :max-eid       e0\n       :max-tx        tx0\n       :pull-patterns (lru/cache 100)\n       :pull-attrs    (lru/cache 100)\n       :hash          (atom 0)})))\n\n(defn- init-max-eid [eavt]\n  (or (-> (set/rslice eavt (datom (dec tx0) nil nil txmax) (datom e0 nil nil tx0))\n        (first)\n        (:e))\n    e0))\n\n(defn ^DB init-db\n  ([datoms] (init-db datoms nil))\n  ([datoms schema]\n    (when-some [not-datom (first (drop-while datom? datoms))]\n      (raise \"init-db expects list of Datoms, got \" (type not-datom)\n        {:error :init-db}))\n    (validate-schema schema)\n    (let [rschema     (rschema (merge implicit-schema schema))\n          indexed     (:db/index rschema)\n          arr         (cond-> datoms\n                        (not (arrays/array? datoms)) (arrays/into-array))\n          _           (arrays/asort arr cmp-datoms-eavt-quick)\n          eavt        (set/from-sorted-array cmp-datoms-eavt arr)\n          _           (arrays/asort arr cmp-datoms-aevt-quick)\n          aevt        (set/from-sorted-array cmp-datoms-aevt arr)\n          avet-datoms (filter (fn [^Datom d] (contains? indexed (.-a d))) datoms)\n          avet-arr    (to-array avet-datoms)\n          _           (arrays/asort avet-arr cmp-datoms-avet-quick)\n          avet        (set/from-sorted-array cmp-datoms-avet avet-arr)\n          max-eid     (init-max-eid eavt)\n          max-tx      (transduce (map (fn [^Datom d] (datom-tx d))) max tx0 eavt)]\n      (map->DB {\n        :schema        schema\n        :rschema       rschema\n        :eavt          eavt\n        :aevt          aevt\n        :avet          avet\n        :max-eid       max-eid\n        :max-tx        max-tx\n        :pull-patterns (lru/cache 100)\n        :pull-attrs    (lru/cache 100)\n        :hash          (atom 0)}))))\n\n(defn restore-db [{:keys [schema eavt aevt avet max-eid max-tx]}]\n  (map->DB\n    {:schema        schema\n     :rschema       (rschema (merge implicit-schema schema))\n     :eavt          eavt\n     :aevt          aevt\n     :avet          avet\n     :max-eid       max-eid\n     :max-tx        max-tx\n     :pull-patterns (lru/cache 100)\n     :pull-attrs    (lru/cache 100)\n     :hash          (atom 0)}))\n\n(defn- equiv-db-index [x y]\n  (loop [xs (seq x)\n         ys (seq y)]\n    (cond\n      (nil? xs) (nil? ys)\n      (= (first xs) (first ys)) (recur (next xs) (next ys))\n      :else false)))\n\n(defn- hash-db [^DB db]\n  (let [h @(.-hash db)]\n    (if (zero? h)\n      (reset! (.-hash db) (combine-hashes (hash (.-schema db))\n                                          (hash (.-eavt db))))\n      h)))\n\n(defn- hash-fdb [^FilteredDB db]\n  (let [h @(.-hash db)\n        datoms (or (-datoms db :eavt []) #{})]\n    (if (zero? h)\n      (let [datoms (or (-datoms db :eavt []) #{})]\n        (reset! (.-hash db) (combine-hashes (hash (-schema db))\n                                            (hash-unordered-coll datoms))))\n      h)))\n\n(defn- equiv-db [db other]\n  (and (or (instance? DB other) (instance? FilteredDB other))\n       (= (-schema db) (-schema other))\n       (equiv-db-index (-datoms db :eavt []) (-datoms other :eavt []))))\n\n#?(:cljs\n   (defn pr-db [db w opts]\n     (-write w \"#datascript/DB {\")\n     (-write w \":schema \")\n     (pr-writer (-schema db) w opts)\n     (-write w \", :datoms \")\n     (pr-sequential-writer w\n                           (fn [d w opts]\n                             (pr-sequential-writer w pr-writer \"[\" \" \" \"]\" opts [(.-e d) (.-a d) (.-v d) (datom-tx d)]))\n                           \"[\" \" \" \"]\" opts (-datoms db :eavt []))\n     (-write w \"}\")))\n\n#?(:clj\n   (do\n     (defn pr-db [db, ^java.io.Writer w]\n       (.write w (str \"#datascript/DB {\"))\n       (.write w \":schema \")\n       (binding [*out* w]\n         (pr (-schema db))\n         (.write w \", :datoms [\")\n         (apply pr (map (fn [^Datom d] [(.-e d) (.-a d) (.-v d) (datom-tx d)]) (-datoms db :eavt []))))\n       (.write w \"]}\"))\n\n     (defmethod print-method DB [db w] (pr-db db w))\n     (defmethod print-method FilteredDB [db w] (pr-db db w))     \n))\n\n(defn db-from-reader [{:keys [schema datoms]}]\n  (init-db (map (fn [[e a v tx]] (datom e a v tx)) datoms) schema))\n\n;; ----------------------------------------------------------------------------\n\n(declare entid-strict entid-some ref?)\n\n(defn- resolve-datom [db e a v t default-e default-tx]\n  (when a (validate-attr a (list 'resolve-datom 'db e a v t)))\n  (datom\n    (or (entid-some db e) default-e)  ;; e\n    a                                 ;; a\n    (if (and (some? v) (ref? db a))   ;; v\n      (entid-strict db v)\n      v)\n    (or (entid-some db t) default-tx))) ;; t\n\n(defn- components->pattern [db index [c0 c1 c2 c3] default-e default-tx]\n  (case index\n    :eavt (resolve-datom db c0 c1 c2 c3 default-e default-tx)\n    :aevt (resolve-datom db c1 c0 c2 c3 default-e default-tx)\n    :avet (resolve-datom db c2 c0 c1 c3 default-e default-tx)))\n\n;; ----------------------------------------------------------------------------\n\n(defrecord TxReport [db-before db-after tx-data tempids tx-meta])\n\n(defn #?@(:clj  [^Boolean is-attr?]\n          :cljs [^boolean is-attr?]) [db attr property]\n  (contains? (-attrs-by db property) attr))\n\n(defn #?@(:clj  [^Boolean multival?]\n          :cljs [^boolean multival?]) [db attr]\n  (is-attr? db attr :db.cardinality/many))\n\n(defn #?@(:clj  [^Boolean ref?]\n          :cljs [^boolean ref?]) [db attr]\n  (is-attr? db attr :db.type/ref))\n\n(defn #?@(:clj  [^Boolean component?]\n          :cljs [^boolean component?]) [db attr]\n  (is-attr? db attr :db/isComponent))\n\n(defn #?@(:clj  [^Boolean indexing?]\n          :cljs [^boolean indexing?]) [db attr]\n  (is-attr? db attr :db/index))\n\n(defn #?@(:clj  [^Boolean tuple?]\n          :cljs [^boolean tuple?]) [db attr]\n  (is-attr? db attr :db.type/tuple))\n\n(defn #?@(:clj  [^Boolean tuple-source?]\n          :cljs [^boolean tuple-source?]) [db attr]\n  (is-attr? db attr :db/attrTuples))\n\n(defn entid [db eid]\n  {:pre [(db? db)]}\n  (cond\n    (and (number? eid) (pos? eid))\n    (if (> eid emax)\n      (raise \"Highest supported entity id is \" emax \", got \" eid {:error :entity-id :value eid})\n      eid)\n    \n    (sequential? eid)\n    (let [[attr value] eid]\n      (cond\n        (not= (count eid) 2)\n          (raise \"Lookup ref should contain 2 elements: \" eid\n            {:error :lookup-ref/syntax, :entity-id eid})\n        (not (is-attr? db attr :db/unique))\n          (raise \"Lookup ref attribute should be marked as :db/unique: \" eid\n            {:error :lookup-ref/unique, :entity-id eid})\n        (nil? value)\n          nil\n        :else\n          (-> (-datoms db :avet eid) first :e)))\n    \n    #?@(:cljs [(array? eid) (recur db (array-seq eid))])\n    \n    (keyword? eid)\n    (-> (-datoms db :avet [:db/ident eid]) first :e)\n\n    :else\n    (raise \"Expected number or lookup ref for entity id, got \" eid\n      {:error :entity-id/syntax, :entity-id eid})))\n\n(defn numeric-eid-exists? [db eid]\n  (= eid (-> (-seek-datoms db :eavt [eid]) first :e)))\n\n(defn entid-strict [db eid]\n  (or (entid db eid)\n      (raise \"Nothing found for entity id \" eid\n             {:error :entity-id/missing\n              :entity-id eid})))\n\n(defn entid-some [db eid]\n  (when eid\n    (entid-strict db eid)))\n\n;;;;;;;;;; Transacting\n\n(defn validate-datom [db ^Datom datom]\n  (when (and (datom-added datom)\n             (is-attr? db (.-a datom) :db/unique))\n    (when-some [found (not-empty (-datoms db :avet [(.-a datom) (.-v datom)]))]\n      (raise \"Cannot add \" datom \" because of unique constraint: \" found\n             {:error :transact/unique\n              :attribute (.-a datom)\n              :datom datom}))))\n\n(defn- validate-attr [attr at]\n  (when-not (or (keyword? attr) (string? attr))\n    (raise \"Bad entity attribute \" attr \" at \" at \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr, :context at})))\n\n(defn- validate-val [v at]\n  (when (nil? v)\n    (raise \"Cannot store nil as a value at \" at\n           {:error :transact/syntax, :value v, :context at})))\n\n(defn- current-tx\n  #?(:clj {:inline (fn [report] `(-> ~report :db-before :max-tx long inc))})\n  ^long [report]\n  (-> report :db-before :max-tx long inc))\n\n(defn- next-eid\n  #?(:clj {:inline (fn [db] `(inc (long (:max-eid ~db))))})\n  ^long [db]\n  (inc (long (:max-eid db))))\n\n#?(:clj\n   (defn- ^Boolean tx-id?\n     [e]\n     (or (identical? :db/current-tx e)\n         (.equals \":db/current-tx\" e) ;; for datascript.js interop\n         (.equals \"datomic.tx\" e)\n         (.equals \"datascript.tx\" e)))\n\n   :cljs\n   (defn- ^boolean tx-id?\n     [e]\n     (or (= e :db/current-tx)\n         (= e \":db/current-tx\") ;; for datascript.js interop\n         (= e \"datomic.tx\")\n         (= e \"datascript.tx\"))))\n\n(defn- #?@(:clj  [^Boolean tempid?]\n           :cljs [^boolean tempid?])\n  [x]\n  (or (and (number? x) (neg? x)) (string? x)))\n\n(defn- new-eid? [db eid]\n  (and (> eid (:max-eid db))\n       (< eid tx0))) ;; tx0 is max eid\n\n(defn- advance-max-eid [db eid]\n  (cond-> db\n    (new-eid? db eid)\n      (assoc :max-eid eid)))\n\n(defn- allocate-eid\n  ([report eid]\n    (update report :db-after advance-max-eid eid))\n  ([report e eid]\n    (cond-> report\n      (tx-id? e)\n      (update :tempids assoc e eid)\n\n      (tempid? e)\n      (update :tempids assoc e eid)\n\n      (and (not (tempid? e)) (new-eid? (:db-after report) eid))\n      (update :tempids assoc eid eid)\n\n      true\n      (update :db-after advance-max-eid eid))))\n\n;; In context of `with-datom` we can use faster comparators which\n;; do not check for nil (~10-15% performance gain in `transact`)\n\n(defn- with-datom [db ^Datom datom]\n  (validate-datom db datom)\n  (let [indexing? (indexing? db (.-a datom))]\n    (if (datom-added datom)\n      (cond-> db\n        true      (update :eavt set/conj datom cmp-datoms-eavt-quick)\n        true      (update :aevt set/conj datom cmp-datoms-aevt-quick)\n        indexing? (update :avet set/conj datom cmp-datoms-avet-quick)\n        true      (advance-max-eid (.-e datom))\n        true      (assoc :hash (atom 0)))\n      (if-some [removing (fsearch db [(.-e datom) (.-a datom) (.-v datom)])]\n        (cond-> db\n          true      (update :eavt set/disj removing cmp-datoms-eavt-quick)\n          true      (update :aevt set/disj removing cmp-datoms-aevt-quick)\n          indexing? (update :avet set/disj removing cmp-datoms-avet-quick)\n          true      (assoc :hash (atom 0)))\n        db))))\n\n(defn- queue-tuple [queue tuple idx db e a v]\n  (let [tuple-value  (or (get queue tuple)\n                       (:v (first (-datoms db :eavt [e tuple])))\n                       (vec (repeat (-> db (-schema) (get tuple) :db/tupleAttrs count) nil)))\n        tuple-value' (assoc tuple-value idx v)]\n    (assoc queue tuple tuple-value')))\n\n(defn- queue-tuples [queue tuples db e a v]\n  (reduce-kv\n    (fn [queue tuple idx]\n      (queue-tuple queue tuple idx db e a v))\n    queue\n    tuples))\n\n(defn- transact-report [report datom]\n  (let [db      (:db-after report)\n        a       (:a datom)\n        report' (-> report\n                  (assoc :db-after (with-datom db datom))\n                  (update :tx-data conj datom))]\n    (if (tuple-source? db a)\n      (let [e      (:e datom)\n            v      (if (datom-added datom) (:v datom) nil)\n            queue  (or (-> report' ::queued-tuples (get e)) {})\n            tuples (get (-attrs-by db :db/attrTuples) a)\n            queue' (queue-tuples queue tuples db e a v)]\n        (update report' ::queued-tuples assoc e queue'))\n      report')))\n\n(defn #?@(:clj  [^Boolean reverse-ref?]\n          :cljs [^boolean reverse-ref?]) [attr]\n  (cond\n    (keyword? attr)\n    (= \\_ (nth (name attr) 0))\n    \n    (string? attr)\n    (boolean (re-matches #\"(?:([^/]+)/)?_([^/]+)\" attr))\n   \n    :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn reverse-ref [attr]\n  (cond\n    (keyword? attr)\n    (if (reverse-ref? attr)\n      (keyword (namespace attr) (subs (name attr) 1))\n      (keyword (namespace attr) (str \"_\" (name attr))))\n\n   (string? attr)\n   (let [[_ ns name] (re-matches #\"(?:([^/]+)/)?([^/]+)\" attr)]\n     (if (= \\_ (nth name 0))\n       (if ns (str ns \"/\" (subs name 1)) (subs name 1))\n       (if ns (str ns \"/_\" name) (str \"_\" name))))\n   \n   :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn- resolve-upserts\n  \"Returns [entity' upserts]. Upsert attributes that resolve to existing entities\n   are removed from entity, rest are kept in entity for insertion. No validation is performed.\n\n   upserts :: {:name  {\\\"Ivan\\\"  1}\n               :email {\\\"ivan@\\\" 2}\n               :alias {\\\"abc\\\"   3\n                       \\\"def\\\"   4}}}\"\n  [db entity]\n  (if-some [idents (not-empty (-attrs-by db :db.unique/identity))]\n    (let [resolve (fn [a v]\n                    (:e (first (-datoms db :avet [a v]))))\n          split   (fn [a vs]\n                    (reduce\n                      (fn [acc v]\n                        (if-some [e (resolve a v)]\n                          (update acc 1 assoc v e)\n                          (update acc 0 conj v)))\n                      [[] {}] vs))]\n      (reduce-kv\n        (fn [[entity' upserts] a v]\n          (validate-attr a entity)\n          (validate-val v entity)\n          (cond\n            (not (contains? idents a))\n            [(assoc entity' a v) upserts]\n\n            (and\n              (multival? db a)\n              (or\n                (arrays/array? v)\n                (and (coll? v) (not (map? v)))))\n            (let [[insert upsert] (split a v)]\n              [(cond-> entity'\n                 (not (empty? insert)) (assoc a insert))\n               (cond-> upserts\n                 (not (empty? upsert)) (assoc a upsert))])\n\n            :else\n            (if-some [e (resolve a v)]\n              [entity' (assoc upserts a {v e})]\n              [(assoc entity' a v) upserts])))\n        [{} {}]\n        entity))\n    [entity nil]))\n\n(defn validate-upserts\n  \"Throws if not all upserts point to the same entity. \n   Returns single eid that all upserts point to, or null.\"\n  [entity upserts]\n  (let [upsert-ids (reduce-kv\n                     (fn [m a v->e]\n                       (reduce-kv\n                         (fn [m v e]\n                           (assoc m e [a v]))\n                         m v->e))\n                     {} upserts)]\n    (if (<= 2 (count upsert-ids))\n      (let [[e1 [a1 v1]] (first upsert-ids)\n            [e2 [a2 v2]] (second upsert-ids)]\n        (raise \"Conflicting upserts: \" [a1 v1] \" resolves to \" e1 \", but \" [a2 v2] \" resolves to \" e2\n          {:error     :transact/upsert\n           :assertion [e1 a1 v1]\n           :conflict  [e2 a2 v2]}))\n      (let [[upsert-id [a v]] (first upsert-ids)\n            eid (:db/id entity)]\n        (when (and\n                (some? upsert-id)\n                (some? eid)\n                (not (tempid? eid))\n                (not= upsert-id eid))\n          (raise \"Conflicting upsert: \" [a v] \" resolves to \" upsert-id \", but entity already has :db/id \" eid\n            {:error     :transact/upsert\n             :assertion [upsert-id a v]\n             :conflict  {:db/id eid}}))\n        upsert-id))))\n\n;; multivals/reverse can be specified as coll or as a single value, trying to guess\n(defn- maybe-wrap-multival [db a vs]\n  (cond\n    ;; not a multival context\n    (not (or (reverse-ref? a)\n             (multival? db a)))\n    [vs]\n\n    ;; not a collection at all, so definitely a single value\n    (not (or (arrays/array? vs)\n             (and (coll? vs) (not (map? vs)))))\n    [vs]\n    \n    ;; probably lookup ref\n    (and (= (count vs) 2)\n         (is-attr? db (first vs) :db.unique/identity))\n    [vs]\n    \n    :else vs))\n\n(defn- explode [db entity]\n  (let [eid  (:db/id entity)\n        ;; sort tuple attrs after non-tuple\n        a+vs (apply concat\n               (reduce\n                 (fn [acc [a vs]]\n                   (update acc (if (tuple? db a) 1 0) conj [a vs]))\n                 [[] []] entity))]\n    (for [[a vs] a+vs\n          :when  (not= a :db/id)\n          :let   [_          (validate-attr a {:db/id eid, a vs})\n                  reverse?   (reverse-ref? a)\n                  straight-a (if reverse? (reverse-ref a) a)\n                  _          (when (and reverse? (not (ref? db straight-a)))\n                               (raise \"Bad attribute \" a \": reverse attribute name requires {:db/valueType :db.type/ref} in schema\"\n                                      {:error :transact/syntax, :attribute a, :context {:db/id eid, a vs}}))]\n          v      (maybe-wrap-multival db a vs)]\n      (if (and (ref? db straight-a) (map? v)) ;; another entity specified as nested map\n        (assoc v (reverse-ref a) eid)\n        (if reverse?\n          [:db/add v   straight-a eid]\n          [:db/add eid straight-a v])))))\n\n(defn- transact-add [report [_ e a v tx :as ent]]\n  (validate-attr a ent)\n  (validate-val  v ent)\n  (let [tx        (or tx (current-tx report))\n        db        (:db-after report)\n        e         (entid-strict db e)\n        v         (if (ref? db a) (entid-strict db v) v)\n        new-datom (datom e a v tx)\n        multival? (multival? db a)\n        old-datom ^Datom (if multival?\n                           (fsearch db [e a v])\n                           (fsearch db [e a]))]\n      (cond\n        (nil? old-datom)\n        (transact-report report new-datom)\n\n        (= (.-v old-datom) v)\n        (update report ::tx-redundant conjv new-datom)\n\n        :else\n        (-> report\n          (transact-report (datom e a (.-v old-datom) tx false))\n          (transact-report new-datom)))))\n\n(defn- transact-retract-datom [report ^Datom d]\n  (let [tx (current-tx report)]\n    (transact-report report (datom (.-e d) (.-a d) (.-v d) tx false))))\n\n(defn- retract-components [db datoms]\n  (into #{} (comp\n              (filter (fn [^Datom d] (component? db (.-a d))))\n              (map (fn [^Datom d] [:db.fn/retractEntity (.-v d)]))) datoms))\n\n(declare transact-tx-data)\n\n(defn- retry-with-tempid [initial-report report es tempid upserted-eid]\n  (if (contains? (:tempids initial-report) tempid)\n    (raise \"Conflicting upsert: \" tempid \" resolves\"\n           \" both to \" upserted-eid \" and \" (get-in initial-report [:tempids tempid])\n      {:error :transact/upsert})\n    ;; try to re-run from the beginning\n    ;; but remembering that `tempid` will resolve to `upserted-eid`\n    (let [tempids' (-> (:tempids report)\n                     (assoc tempid upserted-eid))\n          report'  (assoc initial-report :tempids tempids')]\n      (transact-tx-data report' es))))\n\n(def builtin-fn?\n  #{:db.fn/call\n    :db.fn/cas\n    :db/cas\n    :db/add\n    :db/retract\n    :db.fn/retractAttribute\n    :db.fn/retractEntity\n    :db/retractEntity})\n\n(defn flush-tuples [report]\n  (let [db          (:db-after report)\n        schema      (-schema db)\n        attr-tuples (-attrs-by db :db/attrTuples)]\n    (reduce-kv\n      (fn [entities eid tuples+values]\n        (reduce-kv\n          (fn [entities tuple value]\n            (let [value   (if (every? nil? value) nil value)\n                  current (:v (first (-datoms db :eavt [eid tuple])))]\n              (cond\n                (= value current) entities\n                (nil? value)      (conj entities ^::internal [:db/retract eid tuple current])\n                :else             (conj entities ^::internal [:db/add eid tuple value]))))\n          entities\n          tuples+values))\n      []\n      (::queued-tuples report))))\n\n(defn check-value-tempids [report]\n  (if-let [tempids (::value-tempids report)]\n    (let [all-tempids (transient tempids)\n          reduce-fn   (fn [tempids datom]\n                        (if (datom-added datom)\n                          (dissoc! tempids (:e datom))\n                          tempids))\n          unused      (reduce reduce-fn all-tempids (:tx-data report))\n          unused      (reduce reduce-fn unused (::tx-redundant report))]\n      (if (zero? (count unused))\n        (dissoc report ::value-tempids ::tx-redundant)\n        (raise \"Tempids used only as value in transaction: \" (sort (vals (persistent! unused)))\n               {:error :transact/syntax, :tempids unused})))\n    (dissoc report ::value-tempids ::tx-redundant)))\n\n(defn transact-tx-data [initial-report initial-es]\n  (when-not (or (nil? initial-es)\n                (sequential? initial-es))\n    (raise \"Bad transaction data \" initial-es \", expected sequential collection\"\n           {:error :transact/syntax, :tx-data initial-es}))\n  (let [initial-report' (-> initial-report\n                          #_(update :db-after transient))\n        has-tuples?     (not (empty? (-attrs-by (:db-after initial-report) :db.type/tuple)))\n        initial-es'     (if has-tuples?\n                          (interleave initial-es (repeat ::flush-tuples))\n                          initial-es)]\n    (loop [report initial-report'\n           es     initial-es']\n      (cond+\n        (empty? es)\n        (-> report\n          (check-value-tempids)\n          (update :tempids assoc :db/current-tx (current-tx report))\n          (update :db-after update :max-tx inc)\n          #_(update :db-after persistent!))\n\n        :let [[entity & entities] es]\n\n        (nil? entity)\n        (recur report entities)\n\n        (= ::flush-tuples entity)\n        (if (contains? report ::queued-tuples)\n          (recur\n            (dissoc report ::queued-tuples)\n            (concat (flush-tuples report) entities))\n          (recur report entities))\n\n        :let [db      (:db-after report)\n              tempids (:tempids report)]\n\n        (map? entity)\n        (let [old-eid (:db/id entity)]\n          (cond+\n            ;; trivial entity\n            ; (if (contains? entity :db/id)\n            ;   (= 1 (count entity))\n            ;   (= 0 (count entity)))\n            ; (recur report entities)\n\n            ;; :db/current-tx / \"datomic.tx\" => tx\n            (tx-id? old-eid)\n            (let [id (current-tx report)]\n              (recur (allocate-eid report old-eid id)\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; lookup-ref => resolved | error\n            (sequential? old-eid)\n            (let [id (entid-strict db old-eid)]\n              (recur report\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; upserted => explode | error\n            :let [[entity' upserts] (resolve-upserts db entity)\n                  upserted-eid      (validate-upserts entity' upserts)]\n\n            (some? upserted-eid)\n            (if (and (tempid? old-eid)\n                     (contains? tempids old-eid)\n                     (not= upserted-eid (get tempids old-eid)))\n              (retry-with-tempid initial-report report initial-es old-eid upserted-eid)\n              (recur\n                (-> report\n                  (allocate-eid old-eid upserted-eid)\n                  (update ::tx-redundant conjv (datom upserted-eid nil nil tx0)))\n                (concat (explode db (assoc entity' :db/id upserted-eid)) entities)))\n           \n            ;; resolved | allocated-tempid | tempid | nil => explode\n            (or (number? old-eid)\n                (nil?    old-eid)\n                (string? old-eid))\n            (let [new-eid (cond\n                            (nil? old-eid)    (next-eid db)\n                            (tempid? old-eid) (or (get tempids old-eid) (next-eid db))\n                            :else             old-eid)\n                  new-entity (assoc entity :db/id new-eid)]                \n              (recur (allocate-eid report old-eid new-eid)\n                     (concat (explode db new-entity) entities)))\n           \n            ;; trash => error\n            :else\n            (raise \"Expected number, string or lookup ref for :db/id, got \" old-eid\n              { :error :entity-id/syntax, :entity entity })))\n\n        (sequential? entity)\n        (let [[op e a v] entity]\n          (cond\n            (= op :db.fn/call)\n            (let [[_ f & args] entity]\n              (recur report (concat (apply f db args) entities)))\n            \n            (and (keyword? op)\n              (not (builtin-fn? op)))\n            (if-some [ident (entid db op)]\n              (let [fun  (:v (fsearch db [ident :db/fn]))\n                    args (next entity)]\n                (if (fn? fun)\n                  (recur report (concat (apply fun db args) entities))\n                  (raise \"Entity \" op \" expected to have :db/fn attribute with fn? value\"\n                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))\n              (raise \"Can\u2019t find entity for transaction fn \" op\n                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))\n            \n            (and (tempid? e)\n              (not= op :db/add))\n            (raise \"Can't use tempid in '\" entity \"'. Tempids are allowed in :db/add only\"\n              { :error :transact/syntax, :op entity })\n\n            (or (= op :db.fn/cas)\n              (= op :db/cas))\n            (let [[_ e a ov nv] entity\n                  e (entid-strict db e)\n                  _ (validate-attr a entity)\n                  ov (if (ref? db a) (entid-strict db ov) ov)\n                  nv (if (ref? db a) (entid-strict db nv) nv)\n                  _ (validate-val nv entity)\n                  datoms (vec (-search db [e a]))]\n              (if (multival? db a)\n                (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)\n                  (recur (transact-add report [:db/add e a nv]) entities)\n                  (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" (map :v datoms) \"], expected \" ov\n                         {:error :transact/cas, :old datoms, :expected ov, :new nv}))\n                (let [v (:v (first datoms))]\n                  (if (= v ov)\n                    (recur (transact-add report [:db/add e a nv]) entities)\n                    (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" v \"], expected \" ov\n                           {:error :transact/cas, :old (first datoms), :expected ov, :new nv })))))\n\n            (tx-id? e)\n            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))\n\n            (and (ref? db a) (tx-id? v))\n            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))\n\n            (and (ref? db a) (tempid? v))\n            (if-some [resolved (get tempids v)]\n              (let [report' (update report ::value-tempids assoc resolved v)]\n                (recur report' (cons [op e a resolved] entities)))\n              (let [resolved (next-eid db)\n                    report'  (-> report\n                               (allocate-eid v resolved)\n                               (update ::value-tempids assoc resolved v))]\n                (recur report' es)))\n\n            (tempid? e)\n            (let [upserted-eid  (when (is-attr? db a :db.unique/identity)\n                                  (:e (first (-datoms db :avet [a v]))))\n                  allocated-eid (get tempids e)]\n              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))\n                (retry-with-tempid initial-report report initial-es e upserted-eid)\n                (let [eid (or upserted-eid allocated-eid (next-eid db))]\n                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))\n\n            (and (not (::internal (meta entity)))\n              (tuple? db a))\n            ;; allow transacting in tuples if they fully match already existing values\n            (let [tuple-attrs (get-in db [:schema a :db/tupleAttrs])]\n              (if (and\n                    (= (count tuple-attrs) (count v))\n                    (every? some? v)\n                    (every? \n                      (fn [[tuple-attr tuple-value]]\n                        (let [db-value (:v (first (-datoms db :eavt [e tuple-attr])))]\n                          (= tuple-value db-value)))\n                      (map vector tuple-attrs v)))\n                (recur report entities)\n                (raise \"Can\u2019t modify tuple attrs directly: \" entity\n                  {:error :transact/syntax, :tx-data entity})))\n\n            (= op :db/add)\n            (recur (transact-add report entity) entities)\n\n            (and (= op :db/retract) (some? v))\n            (if-some [e (entid db e)]\n              (let [v (if (ref? db a) (entid-strict db v) v)]\n                (validate-attr a entity)\n                (validate-val v entity)\n                (if-some [old-datom (fsearch db [e a v])]\n                  (recur (transact-retract-datom report old-datom) entities)\n                  (recur report entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractAttribute)\n                (= op :db/retract))\n            (if-some [e (entid db e)]\n              (let [_      (validate-attr a entity)\n                    datoms (vec (-search db [e a]))]\n                (recur (reduce transact-retract-datom report datoms)\n                       (concat (retract-components db datoms) entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractEntity)\n                (= op :db/retractEntity))\n            (if-some [e (entid db e)]\n              (let [e-datoms (vec (-search db [e]))\n                    v-datoms (vec (mapcat (fn [a] (-search db [nil a e])) (-attrs-by db :db.type/ref)))]\n                (recur (reduce transact-retract-datom report (concat e-datoms v-datoms))\n                       (concat (retract-components db e-datoms) entities)))\n              (recur report entities))\n\n           :else\n           (raise \"Unknown operation at \" entity \", expected :db/add, :db/retract, :db.fn/call, :db.fn/retractAttribute, :db.fn/retractEntity or an ident corresponding to an installed transaction function (e.g. {:db/ident <keyword> :db/fn <Ifn>}, usage of :db/ident requires {:db/unique :db.unique/identity} in schema)\" {:error :transact/syntax, :operation op, :tx-data entity})))\n       \n       (datom? entity)\n       (let [[e a v tx added] entity]\n         (if added\n           (recur (transact-add report [:db/add e a v tx]) entities)\n           (recur report (cons [:db/retract e a v] entities))))\n\n       :else\n       (raise \"Bad entity type at \" entity \", expected map or vector\"\n              {:error :transact/syntax, :tx-data entity})))))\n"]}