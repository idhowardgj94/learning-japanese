{"version":3,"sources":["indexed/db/impl/factory.cljs"],"mappings":"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","names":["indexed.db.impl.factory/dict->map","obj","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","indexed.db.impl.factory/Factory","indexed.db.impl.factory/->Factory","factory","_","name","version","indexed.db.impl.request/create-request","a","b","fn-1","cljs.core/type","p","result","G__45099","cljs.core/array?","cljs.core.array_seq","cljs.core.map","G__45103","js/indexedDB","indexed.db.impl.factory/factory?","x","cljs.core/native-satisfies?","indexed.db.impl.protocols/IDBFactory","indexed.db.impl.factory/create-factory","var_args","G__45111","indexed.db.impl.factory/open","js/Error","indexed.db.impl.protocols/open","indexed.db.impl.factory.open","G__45117","indexed.db.impl.factory/delete-database","indexed.db.impl.protocols/delete-database","indexed.db.impl.factory.delete_database","G__45122","indexed.db.impl.factory/cmp","indexed.db.impl.protocols/cmp","indexed.db.impl.factory.cmp","G__45127","indexed.db.impl.factory/databases","indexed.db.impl.protocols/databases","indexed.db.impl.factory.databases"],"sourcesContent":["(ns ^:no-doc indexed.db.impl.factory\n  (:require [indexed.db.impl.request :as request]\n            [indexed.db.impl.protocols :as impl]))\n\n(defn dict->map\n  [obj]\n  {:name    (.-name obj)\n   :version (.-version obj)})\n\n(deftype Factory [factory]\n  impl/IDBFactory\n  (open\n    [_ name version]\n    (request/create-request\n     (.open factory name version)))\n  (delete-database\n    [_ name]\n    (request/create-request (.deleteDatabase factory name)))\n  (cmp\n    [_ a b]\n    (.cmp factory a b))\n  (databases\n    [_ fn-1]\n    (if (type (.-databases factory))\n      (let [p (.databases factory)]\n        (-> p\n            (.then (fn [result]\n                     (cond-> result\n                       (array? result) (->> array-seq (map dict->map))\n                       :always         (fn-1))))))\n      (fn-1 '()))))\n\n(type (.-databases js/indexedDB))\n\n(defn factory?\n  [x]\n  (satisfies? impl/IDBFactory x))\n\n(defn create-factory []\n  (Factory. js/indexedDB))\n\n(defn open\n  ([factory name version]\n   (impl/open factory name version))\n  ([name version]\n   (open (create-factory) name version))\n  ([name]\n   (open (create-factory) name)))\n\n(defn delete-database\n  ([factory name]\n   (impl/delete-database factory name))\n  ([name]\n   (delete-database (create-factory) name)))\n\n(defn cmp\n  ([factory a b]\n   (impl/cmp factory a b))\n  ([a b]\n   (cmp (create-factory) a b)))\n\n(defn databases\n  ([factory fn-1]\n   (impl/databases factory fn-1)\n   factory)\n  ([fn-1]\n   (databases (create-factory) fn-1)))\n"]}