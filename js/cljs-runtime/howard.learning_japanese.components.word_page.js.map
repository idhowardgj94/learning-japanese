{"version":3,"sources":["howard/learning_japanese/components/word_page.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","_","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__36754__auto__","day8.re-frame.debux.common.util/send-trace!","e","e54517","e54518","re_frame.core.subscribe","p__54519","map__54520","cljs.core/--destructure-map","cljs.core.get","e54521","p__54522","map__54523","current-index","data","mode","$","cljs.core.assoc","cljs.core/count","p__54524","map__54525","howard.learning-japanese.components.word-page/chinese-word-card","word","sentence","chinese","cljs.core/deref","answer-field","reagent-mui.components/card","reagent-mui.components/card-content","reagent-mui.components/typography","reagent-mui.components/box","reagent-mui.components/card-actions","reagent-mui.components/button","re-frame.core/dispatch","reagent-mui.icons.circle-notifications/circle-notifications","reagent-mui.icons.mode/mode","p__54526","map__54527","howard.learning-japanese.components.word-page/japanese-word-card","howard.learning-japanese.components.word-page/word-page","match","js/module$node_modules$react$index.useEffect","offset","howard.learning-japanese.datascript.query/get-page-by-num-and-offset","cljs.core.into","js/console.log","cljs.core/clj->js","map__54528","steps","index","reagent-mui.components/mobile-stepper","cljs.core._EQ_","reagent-mui.components/grid"],"sourcesContent":["(ns howard.learning-japanese.components.word-page\n  (:require\n   [\"react\" :refer [useEffect]]\n   [day8.re-frame.tracing :refer [fn-traced]]\n   [howard.learning-japanese.events :as events]\n   [howard.learning-japanese.datascript.query :refer [get-page-by-num-and-offset]]\n   [re-frame.core :as re-frame]\n   [reagent-mui.components\n    :refer [box button card card-actions card-content grid typography\n            mobile-stepper]]\n   [reagent-mui.icons.circle-notifications :refer [circle-notifications]]\n   [reagent-mui.icons.mode :refer [mode]]))\n\n(re-frame/reg-sub\n ::card-answer-field\n (fn [db _]\n   (:word/card-answer db)))\n\n(re-frame/reg-sub\n ::get-card-data-and-index\n (fn-traced [db _]\n            {:word/card-data (:word/card-data db)\n             :word/card-mode (:word/card-mode db)\n             :word/current-index (:word/current-index db)}))\n\n(re-frame/reg-sub\n ::get-current-card-data\n (fn-traced [_]\n            (re-frame/subscribe [::get-card-data-and-index]))\n (fn-traced [{current-index :word/current-index\n              data :word/card-data\n              mode :word/card-mode} _]\n            (as-> (get data current-index) $\n              (assoc {}\n                     :word/current-data $\n                     :word/count (count data)\n                     :word/current-index current-index\n                     :word/card-mode mode))))\n\n(defn chinese-word-card\n  \"define a word card component,\n  which can show eithor chinese or japanese\"\n  [{:keys [word sentence chinese]}]\n  (let [answer-field @(re-frame/subscribe [::card-answer-field])]\n    [card\n     [card-content\n      [typography {:variant \"h4\"} chinese]\n      (when answer-field\n        [:<>\n         [box {:component \"h3\"\n               :pt 1\n               :dangerouslySetInnerHTML {:__html word}\n               :sx {:font-weight \"bold\"}}]\n         [box {:component \"p\"\n               :pl 2}\n          sentence]])]\n\n     [card-actions\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/toggle-word-answer]))}\n       [circle-notifications {:font-size \"large\"}]]\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/change-card-mode \"hide-chinese\"]))}\n       [mode {:font-size \"large\"}]]]]))\n\n(defn japanese-word-card\n  \"define a word card component,\n  which can show eithor chinese or japanese\"\n  [{:keys [word sentence chinese]}]\n  (let [answer-field @(re-frame/subscribe [::card-answer-field])]\n    [card\n     [card-content\n      [typography {:variant \"h3\"\n                   :dangerouslySetInnerHTML {:__html word}}]\n\n      (when answer-field\n        [box {:component \"div\"\n              :pt 1\n              :sx {:font-weight \"bold\"}}\n         chinese])]\n     [box {:component \"p\"\n           :pl 2}\n      sentence]\n     [card-actions\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/toggle-word-answer]))}\n       [circle-notifications {:font-size \"large\"}]]\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/change-card-mode \"hide-japanese\"]))}\n       [mode {:font-size \"large\"}]]]]))\n\n(defn word-page\n  \"the word page\"\n  [match]\n  (useEffect (fn []\n               (let [offset (-> match\n                                :parameters\n                                :query\n                                :offset)\n                     data (->> (get-page-by-num-and-offset 10 offset)\n                               (into []))]\n                 (re-frame/dispatch [::events/set-word-data data])\n                 (re-frame/dispatch [::events/word-reset])\n                 (js/console.log offset (clj->js data)))) (array []))\n\n  (let [{data :word/current-data\n         steps :word/count\n         index :word/current-index\n         mode :word/card-mode} @(re-frame/subscribe [::get-current-card-data])]\n    [:div {:style {:flex 1\n                   :display \"flex\"\n                   :flex-direction \"column\"}}\n     [box {:sx {:margin \"auto 0\"}}\n      [mobile-stepper {:variant \"progress\"\n                       :position \"static\"\n                       :sx {:flex 1}\n                       :LinearProgressProps {:sx {:flex 1}}\n                       :steps steps\n                       :activeStep index}]\n      (if (= mode \"hide-chinese\")\n        [japanese-word-card data]\n        [chinese-word-card data])\n      [grid {:container true\n             :spacing 2\n             :mt 2}\n       [grid {:item true\n              :xs 6}\n        [button {:variant \"contained\"\n                 :full-width true\n                 :on-click #(re-frame/dispatch [::events/word-prev])\n                 :color \"secondary\"} \"previous\"]]\n       [grid {:item true\n              :xs 6}\n        [button {:variant \"contained\"\n                 :on-click #(re-frame/dispatch [::events/word-next])\n                 :full-width true} \"next\"]]]]]))\n"]}