{"version":3,"sources":["howard/learning_japanese/components/word_page.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","_","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__37730__auto__","day8.re-frame.debux.common.util/send-trace!","e","e56541","e56542","re_frame.core.subscribe","p__56543","map__56544","cljs.core/--destructure-map","cljs.core.get","e56545","p__56546","map__56547","current-index","data","mode","$","cljs.core.assoc","cljs.core/count","e56548","p__56549","map__56550","howard.learning-japanese.components.word-page/chinese-word-card","word","sentence","chinese","cljs.core/deref","map__56551","answer-field","count","reagent-mui.components/card","reagent-mui.components/card-content","reagent-mui.components/typography","reagent-mui.components/box","reagent-mui.components/card-actions","reagent-mui.components/button","re-frame.core/dispatch","reagent-mui.icons.circle-notifications/circle-notifications","reagent-mui.icons.mode/mode","reagent-mui.icons.check/check","reagent-mui.icons.cancel/cancel","iter__5523__auto__","s__56553","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__56555","cljs.core/chunk-buffer","i__56554","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56552","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","p__56556","map__56557","howard.learning-japanese.components.word-page/japanese-word-card","map__56558","s__56560","b__56562","i__56561","iter__56559","howard.learning-japanese.components.word-page/word-page","match","js/module$node_modules$react$index.useEffect","offset","howard.learning-japanese.datascript.query/get-page-by-num-and-offset","cljs.core.into","map__56563","steps","index","reagent-mui.components/mobile-stepper","cljs.core._EQ_","reagent-mui.components/grid","cljs.core/chunk-first"],"sourcesContent":["(ns howard.learning-japanese.components.word-page\n  (:require\n   [\"react\" :refer [useEffect]]\n   [day8.re-frame.tracing :refer [fn-traced]]\n   [howard.learning-japanese.events :as events]\n   [howard.learning-japanese.datascript.query :refer [get-page-by-num-and-offset]]\n   [re-frame.core :as re-frame]\n   [reagent-mui.components\n    :refer [box button card card-actions card-content grid typography\n            mobile-stepper]]\n   [reagent-mui.icons.check :refer [check]]\n   [reagent-mui.icons.cancel :refer [cancel]]\n   [reagent-mui.icons.circle-notifications :refer [circle-notifications]]\n   [reagent-mui.icons.mode :refer [mode]]))\n\n(re-frame/reg-sub\n ::card-answer-field\n (fn [db _]\n   (:word/card-answer db)))\n\n(re-frame/reg-sub\n ::get-card-data-and-index\n (fn-traced [db _]\n            {:word/card-data (:word/card-data db)\n             :word/card-mode (:word/card-mode db)\n             :word/current-index (:word/current-index db)}))\n\n(re-frame/reg-sub\n ::get-current-card-data\n (fn-traced [_]\n            (re-frame/subscribe [::get-card-data-and-index]))\n (fn-traced [{current-index :word/current-index\n              data :word/card-data\n              mode :word/card-mode} _]\n            (as-> (get data current-index) $\n              (assoc {}\n                     :word/current-data $\n                     :word/count (count data)\n                     :word/current-index current-index\n                     :word/card-mode mode))))\n\n(re-frame/reg-sub\n ::get-current-word-record\n (fn-traced [db _]\n            (:word/current-word-record db)))\n(defn chinese-word-card\n  \"define a word card component,\n  which can show eithor chinese or japanese\"\n  [{:keys [word sentence chinese]}]\n  (let [answer-field @(re-frame/subscribe [::card-answer-field])\n        {:keys [count]} @(re-frame/subscribe [::get-current-word-record])]\n    [card\n     [card-content\n      [typography {:variant \"h4\"} chinese]\n      (when answer-field\n        [:<>\n         [box {:component \"h3\"\n               :pt 1\n               :dangerouslySetInnerHTML {:__html word}\n               :sx {:font-weight \"bold\"}}]\n         [box {:component \"p\"\n               :pl 2}\n          sentence]])]\n\n     [card-actions\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/toggle-word-answer]))\n               :sx {:mx 1\n                    :min-width 0\n                    :px 0}}\n       [circle-notifications {:font-size \"medium\"}]]\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/change-card-mode \"hide-chinese\"]))\n               :sx {:mx 1\n                    :min-width 0\n                    :px 0}}\n       [mode {:font-size \"medium\"}]]\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/add-check-list-record-by-word word]))\n               :sx {:mx 1\n                    :min-width 0\n                    :px 0}}\n\n       [check {:font-size \"medium\"}]]\n      [button {:on-click (fn []\n                           (re-frame/dispatch [::events/remove-check-list-record-by-word word]))\n               :sx {:mx 1\n                    :min-width 0\n                    :px 0}}\n       [cancel {:font-size \"medium\"}]]\n      [box {:sx {:display \"flex\" :margin-right 0 :margin-left \"auto\"}}\n       (when (> count 0)\n         (for [i (range count)]\n           [check {:key (str word \"-\" i) :sx {:color \"green\"} :font-size \"large\" :color \"green\"}]))]]]))\n\n(defn japanese-word-card\n  \"define a word card component,\n  which can show eithor chinese or japanese\"\n  [{:keys [word sentence chinese]}]\n  (when (not (nil? word))\n    (let [answer-field @(re-frame/subscribe [::card-answer-field])\n          {:keys [count]} @(re-frame/subscribe [::get-current-word-record])]\n      [card\n       [card-content\n        [typography {:variant \"h3\"\n                     :dangerouslySetInnerHTML {:__html word}}]\n\n        (when answer-field\n          [box {:component \"div\"\n                :pt 1\n                :sx {:font-weight \"bold\"}}\n           chinese])]\n       [box {:component \"p\"\n             :pl 2}\n        sentence]\n       [card-actions\n        [button {:on-click (fn []\n                             (re-frame/dispatch [::events/toggle-word-answer]))\n                 :sx {:mx 1\n                      :min-width 0\n                      :px 0}}\n         [circle-notifications {:font-size \"medium\"}]]\n        [button {:on-click (fn []\n                             (re-frame/dispatch [::events/change-card-mode \"hide-japanese\"]))\n                 :sx {:mx 1\n                      :min-width 0\n                      :px 0}}\n         [mode {:font-size \"medium\"}]]\n        [button {:on-click (fn []\n                             (re-frame/dispatch [::events/add-check-list-record-by-word word]))\n                 :sx {:mx 1\n                      :min-width 0\n                      :px 0}}\n         [check {:font-size \"medium\"}]]\n        [button {:on-click (fn []\n                             (re-frame/dispatch [::events/remove-check-list-record-by-word word]))\n                 :sx {:mx 1\n                      :min-width 0\n                      :px 0}}\n         [cancel {:font-size \"medium\"}]]\n        [box {:sx {:display \"flex\" :margin-right 0 :margin-left \"auto\"}}\n         (when (> count 0)\n           (for [i (range count)]\n             [check {:key (str word \"-\" i) :sx {:color \"green\"} :font-size \"medium\" :color \"green\"}]))]]])))\n\n(defn word-page\n  \"the word page\"\n  [match]\n  (useEffect (fn []\n               (let [offset (-> match\n                                :parameters\n                                :query\n                                :offset)\n                     data (->> (get-page-by-num-and-offset 10 offset)\n                               (into []))]\n                 (re-frame/dispatch [::events/set-word-data data])\n                 (re-frame/dispatch [::events/word-reset]))) (array []))\n\n  (let [{data :word/current-data\n         steps :word/count\n         index :word/current-index\n         mode :word/card-mode} @(re-frame/subscribe [::get-current-card-data])]\n    (when (not (nil? data))\n      (re-frame/dispatch [::events/get-check-list (:word data)]))\n    [:div {:style {:flex 1\n                   :display \"flex\"\n                   :flex-direction \"column\"}}\n     [box {:sx {:margin \"auto 0\"}}\n      [mobile-stepper {:variant \"progress\"\n                       :position \"static\"\n                       :sx {:flex 1}\n                       :LinearProgressProps {:sx {:flex 1}}\n                       :steps steps\n                       :activeStep index}]\n      (if (= mode \"hide-chinese\")\n        [japanese-word-card data]\n        [chinese-word-card data])\n      [grid {:container true\n             :spacing 2\n             :mt 2}\n       [grid {:item true\n              :xs 6}\n        [button {:variant \"contained\"\n                 :full-width true\n                 :on-click #(re-frame/dispatch [::events/word-prev])\n                 :color \"secondary\"} \"previous\"]]\n       [grid {:item true\n              :xs 6}\n        [button {:variant \"contained\"\n                 :on-click #(re-frame/dispatch [::events/word-next])\n                 :full-width true} \"next\"]]]]]))\n"]}