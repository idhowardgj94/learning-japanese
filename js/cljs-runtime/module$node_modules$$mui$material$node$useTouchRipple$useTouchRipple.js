shadow$provide.module$node_modules$$mui$material$node$useTouchRipple$useTouchRipple=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var React=
function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,
key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}(require("module$node_modules$react$index")),_utils=require("module$node_modules$$mui$material$node$utils$index");exports.default=props=>{function useRippleHandler(rippleAction,skipRippleAction=disableTouchRipple){return(0,_utils.useEventCallback)(event=>{if(!skipRippleAction&&rippleRef.current)rippleRef.current[rippleAction](event);
return!0})}const {disabled,disableFocusRipple,disableRipple,disableTouchRipple,focusVisible,rippleRef}=props;React.useEffect(()=>{if(focusVisible&&!disableFocusRipple&&!disableRipple){var _rippleRef$current;null==(_rippleRef$current=rippleRef.current)?void 0:_rippleRef$current.pulsate()}},[rippleRef,focusVisible,disableFocusRipple,disableRipple]);const keydownRef=React.useRef(!1),handleKeyDown=(0,_utils.useEventCallback)(event=>{!disableFocusRipple&&!keydownRef.current&&focusVisible&&rippleRef.current&&
" "===event.key&&(keydownRef.current=!0,rippleRef.current.stop(event,()=>{var _rippleRef$current2;null==rippleRef?void 0:null==(_rippleRef$current2=rippleRef.current)?void 0:_rippleRef$current2.start(event)}))}),handleKeyUp=(0,_utils.useEventCallback)(event=>{!disableFocusRipple&&" "===event.key&&rippleRef.current&&focusVisible&&!event.defaultPrevented&&(keydownRef.current=!1,rippleRef.current.stop(event,()=>{var _rippleRef$current3;null==rippleRef?void 0:null==(_rippleRef$current3=rippleRef.current)?
void 0:_rippleRef$current3.pulsate(event)}))}),handleBlur=useRippleHandler("stop",!1),handleMouseDown=useRippleHandler("start"),handleContextMenu=useRippleHandler("stop"),handleDragLeave=useRippleHandler("stop"),handleMouseUp=useRippleHandler("stop"),handleMouseLeave=useRippleHandler("stop"),handleTouchStart=useRippleHandler("start"),handleTouchEnd=useRippleHandler("stop"),handleTouchMove=useRippleHandler("stop"),[mountedState,setMountedState]=React.useState(!1);React.useEffect(()=>{setMountedState(!0)},
[]);props=mountedState&&!disableRipple&&!disabled;const getRippleHandlers=React.useMemo(()=>{const rippleHandlers={onBlur:handleBlur,onKeyDown:handleKeyDown,onKeyUp:handleKeyUp,onMouseDown:handleMouseDown,onMouseUp:handleMouseUp,onMouseLeave:handleMouseLeave,onContextMenu:handleContextMenu,onDragLeave:handleDragLeave,onTouchStart:handleTouchStart,onTouchEnd:handleTouchEnd,onTouchMove:handleTouchMove};return(otherEvents={})=>Object.keys(rippleHandlers).map(eventName=>({name:eventName,handler:ev=>{var _otherEvents$eventNam;
null==(_otherEvents$eventNam=otherEvents[eventName])?void 0:_otherEvents$eventNam.call(otherEvents,ev);rippleHandlers[eventName](ev)}})).reduce((acc,current)=>{acc[current.name]=current.handler;return acc},{})},[handleBlur,handleKeyDown,handleKeyUp,handleMouseDown,handleMouseUp,handleMouseLeave,handleContextMenu,handleDragLeave,handleTouchStart,handleTouchEnd,handleTouchMove]);return{enableTouchRipple:props,getRippleHandlers}}}
//# sourceMappingURL=module$node_modules$$mui$material$node$useTouchRipple$useTouchRipple.js.map
